diff --git a/.gitignore b/.gitignore
index 2f11831..8d50e30 100644
--- a/.gitignore
+++ b/.gitignore
@@ -24,3 +24,4 @@ testbin/*
 *.swp
 *.swo
 *~
+polykube-cni.patch
\ No newline at end of file
diff --git a/cni/lbrp.go b/cni/lbrp.go
index bb012b0..04b5928 100644
--- a/cni/lbrp.go
+++ b/cni/lbrp.go
@@ -39,8 +39,8 @@ func checkLbrpPort(name string, portName string, peerName string, contIP string)
 		return fmt.Errorf("wrong lbrp port status - required: UP, found: DOWN")
 	}
 
-	if port.Ip_ != contIP {
-		return fmt.Errorf("wrong lbrp port associated IP - required: %q, found: %q", contIP, port.Ip_)
+	if port.Ip != contIP {
+		return fmt.Errorf("wrong lbrp port associated IP - required: %q, found: %q", contIP, port.Ip)
 	}
 
 	return nil
diff --git a/cni/main.go b/cni/main.go
index 0607c65..7e73dd4 100644
--- a/cni/main.go
+++ b/cni/main.go
@@ -22,6 +22,12 @@ import (
 	"encoding/json"
 	"errors"
 	"fmt"
+	"io/ioutil"
+	"net"
+	"os"
+	"runtime"
+	"strings"
+
 	"github.com/containernetworking/cni/pkg/skel"
 	"github.com/containernetworking/cni/pkg/types"
 	current "github.com/containernetworking/cni/pkg/types/100"
@@ -33,11 +39,6 @@ import (
 	"github.com/polycube-network/polykube/utils"
 	log "github.com/sirupsen/logrus"
 	"github.com/vishvananda/netlink"
-	"io/ioutil"
-	"net"
-	"os"
-	"runtime"
-	"strings"
 )
 
 const (
@@ -384,7 +385,7 @@ func cmdAdd(args *skel.CmdArgs) error {
 	port := lbrp.Ports{
 		Name:  lbrpPortName,
 		Type_: "frontend",
-		Ip_:   addr.IP.String(),
+		Ip:    addr.IP.String(),
 		Peer:  hostIfaceName,
 	}
 	nlog = l.WithFields(log.Fields{
diff --git a/manifests/config_map.yaml b/manifests/config_map.yaml
index 1e89f5a..f542c7b 100644
--- a/manifests/config_map.yaml
+++ b/manifests/config_map.yaml
@@ -10,7 +10,7 @@ data:
   vxlanIfaceName: "vxlan0"
   polykubeVethPairNamePrefix: "polykube"
   vtepCidr: "10.18.0.0/16"
-  clusterCidr: "192.178.0.0/16"
+  clusterCidr: "192.168.0.0/16"
   nodePortRange: "30000-32767"
   cniConfFilePath: "/host/etc/cni/net.d/00-polykube.json"
   mtu: "1450"
@@ -18,6 +18,7 @@ data:
   routerName: "r0"
   extLbrpName: "elb0"
   k8sDispName: "k0"
+  isDefaultGwDifferentThenExtIface: "true"
   # The cubes log level can assume one of the following values:
   # "TRACE", "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL", "OFF"
   cubesLogLevel: "INFO"
@@ -28,4 +29,10 @@ data:
   # added to the daemonset tolerations:
   # - effect: NoSchedule
   #   key: node-role.kubernetes.io/master
-  isCPNodesDeployAllowed: "true"
\ No newline at end of file
+  isCPNodesDeployAllowed: "true"
+  # This flag is used to enable Morpheus optimization
+  enableMorpheusDynamicOpts: "true"
+  morpheusLogLevel: "INFO"
+  morpheusTablesToSkip: "[hash_session]"
+  morpheusOptimizerTimeout: "2"
+  morpheusOptimizerTimeoutInit: "10"
\ No newline at end of file
diff --git a/manifests/daemon_set.yaml b/manifests/daemon_set.yaml
index 91fe70e..81cd03d 100644
--- a/manifests/daemon_set.yaml
+++ b/manifests/daemon_set.yaml
@@ -9,45 +9,60 @@ spec:
   selector:
     matchLabels:
       k8s-app: polykube
-      # The following should not be necessary anymore
-      # kubernetes.io/cluster-service: "true"
   template:
     metadata:
       labels:
         k8s-app: polykube
-        # The following should not be necessary anymore
-        # kubernetes.io/cluster-service: "true"
-      # annotations:
-        # Mark polycube as critical, gets priority
-        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
-        # The following was replaced by .spec.priorityClassName: system-node-critical
-        # scheduler.alpha.kubernetes.io/critical-pod: ''
-        # The following was replaced by a toleration in the .spec.tolerations list
-        # scheduler.alpha.kubernetes.io/tolerations: >-
-        #  [{"key":"dedicated","operator":"Equal","value":"master","effect":"NoSchedule"}]
     spec:
+      affinity:
+        nodeAffinity:
+          requiredDuringSchedulingIgnoredDuringExecution:
+            nodeSelectorTerms:
+            - matchExpressions:
+              - key: kubernetes.io/os
+                operator: In
+                values:
+                - linux
       priorityClassName: system-node-critical
       serviceAccountName: polykube-ctrl-mgr-sa
       hostNetwork: true
       containers:
         - name: polycubed
-          image: ekoops/polycube:latest
+          image: morpheuscompiler/morpheus-polycube-k8s:latest
           imagePullPolicy: Always
           terminationMessagePolicy: FallbackToLogsOnError # in order to allow k8s to retrieve log from container stderr
           securityContext:
             privileged: true
-          command: ["polycubed",
-                    "--loglevel=INFO",
-                    "--addr=0.0.0.0",
-                    "--logfile=/host/var/log/polycubed.polykube.log"]
-#          livenessProbe: # TODO maybe the livenessProbe might be removed
-#            httpGet:
-#              host: 127.0.0.1
-#              path: /polycube/v1/ # TODO change this
-#              port: 9000
-#            initialDelaySeconds: 60 # TODO check
-#            timeoutSeconds: 10 # TODO check
-#            periodSeconds: 20 # TODO check
+          command: ["/bin/bash", "-c"]
+          args: ["/save_context.sh && \
+                 /create_morpheus_config_file.sh && \
+                 /start_polycubed.sh"]
+          lifecycle:
+            preStop:
+              exec:
+                command:
+                  - "/cleanup_polycube.sh"
+          env:
+            - name: MORPHEUS_LOG_LEVEL
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: morpheusLogLevel
+            - name: MORPHEUS_TABLES_TO_SKIP
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: morpheusTablesToSkip
+            - name: MORPHEUS_OPTIMIZER_TIMEOUT
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: morpheusOptimizerTimeout
+            - name: MORPHEUS_OPTIMIZER_TIMEOUT_INIT
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: morpheusOptimizerTimeoutInit
           volumeMounts:
             - name: lib-modules
               mountPath: /lib/modules
@@ -56,7 +71,7 @@ spec:
             - name: var-log
               mountPath: /host/var/log
         - name: polykube
-          image: ekoops/polykube:latest
+          image: morpheuscompiler/morpheus-k8s:latest
           imagePullPolicy: Always
           terminationMessagePolicy: FallbackToLogsOnError # in order to allow k8s to retrieve log from container stderr
           securityContext:
@@ -71,18 +86,6 @@ spec:
               exec:
                 command:
                   - "/cni-uninstall.sh"
-#          livenessProbe:
-#            httpGet:
-#              path: /healthz
-#              port: 8081
-#            initialDelaySeconds: 15
-#            periodSeconds: 20
-#          readinessProbe:
-#            httpGet:
-#              path: /readyz
-#              port: 8081
-#            initialDelaySeconds: 5
-#            periodSeconds: 10
           env:
             - name: POD_NAME
               valueFrom:
@@ -172,6 +175,21 @@ spec:
                 configMapKeyRef:
                   name: polykube-cfg
                   key: isCPNodesDeployAllowed
+            - name: ENABLE_MORPHEUS_DYNAMIC_OPTS
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: enableMorpheusDynamicOpts
+            - name: MORPHEUS_LOG_LEVEL
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: morpheusLogLevel
+            - name: IS_DEFAULT_GW_DIFFERENT_THEN_EXT_IFACE
+              valueFrom:
+                configMapKeyRef:
+                  name: polykube-cfg
+                  key: isDefaultGwDifferentThenExtIface
           volumeMounts:
             - name: opt-cni-bin
               mountPath: /host/opt/cni/bin
@@ -194,13 +212,5 @@ spec:
           hostPath:
             path: /usr/src
       tolerations:
-        - effect: NoSchedule
-          key: node.kubernetes.io/not-ready
-        #  Uncomment/Comment the following toleration in order to allow/disallow deployment on master node
-        - effect: NoSchedule
-          key: node-role.kubernetes.io/master
-        - effect: NoSchedule
-          key: node.cloudprovider.kubernetes.io/uninitialized
-          value: "true"
-        - key: CriticalAddonsOnly
-          operator: "Exists"
\ No newline at end of file
+      - operator: Exists
+        effect: NoSchedule
diff --git a/node/env.go b/node/env.go
index 967992e..3edeadb 100644
--- a/node/env.go
+++ b/node/env.go
@@ -19,12 +19,13 @@ package node
 import (
 	"errors"
 	"fmt"
-	"github.com/containernetworking/plugins/pkg/ip"
-	"github.com/polycube-network/polykube/utils"
 	"net"
 	"os"
 	"strconv"
 	"strings"
+
+	"github.com/containernetworking/plugins/pkg/ip"
+	"github.com/polycube-network/polykube/utils"
 )
 
 const (
@@ -225,6 +226,34 @@ func LoadEnvironment() error {
 	}
 	env.IsCPNodesDeployAllowed = isCPNodesDeployAllowed
 
+	// IsDefaultGwDifferentThenExtIface
+	IsDefaultGwDifferentThenExtIfaceStr := getEnvVar("IS_DEFAULT_GW_DIFFERENT_THEN_EXT_IFACE", "false")
+	IsDefaultGwDifferentThenExtIface, err := strconv.ParseBool(IsDefaultGwDifferentThenExtIfaceStr)
+	if err != nil {
+		log.Error(
+			err,
+			"failed to parse env variable",
+			"envVar", "IS_DEFAULT_GW_DIFFERENT_THEN_EXT_IFACE",
+			"value", IsDefaultGwDifferentThenExtIfaceStr,
+		)
+		return errors.New("failed to parse IS_DEFAULT_GW_DIFFERENT_THEN_EXT_IFACE")
+	}
+	env.IsDefaultGwDifferentThenExtIface = IsDefaultGwDifferentThenExtIface
+
+	// isMorpheusDynamicOptsEnabled
+	isMorpheusDynamicOptsEnabledStr := getEnvVar("ENABLE_MORPHEUS_DYNAMIC_OPTS", "false")
+	isMorpheusDynamicOptsEnabled, err := strconv.ParseBool(isMorpheusDynamicOptsEnabledStr)
+	if err != nil {
+		log.Error(
+			err,
+			"failed to parse env variable",
+			"envVar", "ENABLE_MORPHEUS_DYNAMIC_OPTS",
+			"value", isMorpheusDynamicOptsEnabledStr,
+		)
+		return errors.New("failed to parse ENABLE_MORPHEUS_DYNAMIC_OPTS")
+	}
+	env.EnableMorpheusDynamicOpts = isMorpheusDynamicOptsEnabled
+
 	Env = env
 	log.Info("loaded environment configuration")
 	return nil
diff --git a/node/node.go b/node/node.go
index 8a91ba4..75d7c4b 100644
--- a/node/node.go
+++ b/node/node.go
@@ -20,6 +20,8 @@ import (
 	"context"
 	"errors"
 	"fmt"
+	"net"
+
 	"github.com/containernetworking/plugins/pkg/ip"
 	"github.com/polycube-network/polykube/types"
 	"github.com/vishvananda/netlink"
@@ -27,7 +29,6 @@ import (
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	"k8s.io/client-go/kubernetes"
 	"k8s.io/client-go/rest"
-	"net"
 	ctrl "sigs.k8s.io/controller-runtime"
 )
 
@@ -132,7 +133,9 @@ func GetDefaultGatewayIPNet(extIface *types.Iface) (*net.IPNet, error) {
 			errors.New("the route link index doesn't match the external interface link index"),
 			"link index mismatch", "routeLinkIndex", routeLI, "extIfaceLinkIndex", extIfaceLI,
 		)
-		return nil, errors.New("the route link index doesn't match the external interface link index")
+		if !Env.IsDefaultGwDifferentThenExtIface {
+			return nil, errors.New("the route link index doesn't match the external interface link index")
+		}
 	}
 
 	gwIPNet := &net.IPNet{
@@ -175,7 +178,13 @@ func GetDefaultGatewayMAC(extIface *types.Iface, gwIP net.IP) (net.HardwareAddr,
 		errors.New("no ARP entry for default gateway"),
 		"failed to retrieve the MAC of the default gateway for the cluster node external interface",
 	)
-	return nil, errors.New("failed to retrieve the MAC of the default gateway for the cluster node external interface")
+
+	if !Env.IsDefaultGwDifferentThenExtIface {
+		return nil, errors.New("failed to retrieve the MAC of the default gateway for the cluster node external interface")
+	} else {
+		mac := [6]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
+		return net.HardwareAddr(mac[:]), nil
+	}
 }
 
 // GetIP extracts the first parsable IPv4 address of type NodeInternalIP inside the provided node object.
diff --git a/node/types.go b/node/types.go
index 275a618..601ff2b 100644
--- a/node/types.go
+++ b/node/types.go
@@ -18,31 +18,34 @@ package node
 
 import (
 	"fmt"
+	"net"
+
 	"github.com/polycube-network/polykube/types"
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/client-go/kubernetes"
-	"net"
 )
 
 type Environment struct {
-	PodName                    string
-	NodeName                   string
-	APIServerIP                net.IP
-	APIServerPort              int
-	VxlanIfaceName             string
-	PolykubeVethPairNamePrefix string
-	VtepCIDR                   *net.IPNet
-	ClusterCIDR                *net.IPNet
-	NodePortRange              string
-	CNIConfFilePath            string
-	MTU                        int
-	IntLbrpName                string
-	RouterName                 string
-	ExtLbrpName                string
-	K8sDispName                string
-	CubesLogLevel              string
-	CNILogLevel                string
-	IsCPNodesDeployAllowed     bool
+	PodName                          string
+	NodeName                         string
+	APIServerIP                      net.IP
+	APIServerPort                    int
+	VxlanIfaceName                   string
+	PolykubeVethPairNamePrefix       string
+	VtepCIDR                         *net.IPNet
+	ClusterCIDR                      *net.IPNet
+	NodePortRange                    string
+	CNIConfFilePath                  string
+	MTU                              int
+	IntLbrpName                      string
+	RouterName                       string
+	ExtLbrpName                      string
+	K8sDispName                      string
+	CubesLogLevel                    string
+	CNILogLevel                      string
+	IsCPNodesDeployAllowed           bool
+	EnableMorpheusDynamicOpts        bool
+	IsDefaultGwDifferentThenExtIface bool
 }
 
 func (e *Environment) APIServerEndpoint() string {
diff --git a/polycube/clients/k8sdispatcher/README.md b/polycube/clients/k8sdispatcher/README.md
index 7d2e0ca..81fb61a 100644
--- a/polycube/clients/k8sdispatcher/README.md
+++ b/polycube/clients/k8sdispatcher/README.md
@@ -32,6 +32,7 @@ Class | Method | HTTP request | Description
 *K8sdispatcherApi* | [**DeleteK8sdispatcherPortsByID**](docs/K8sdispatcherApi.md#deletek8sdispatcherportsbyid) | **Delete** /k8sdispatcher/{name}/ports/{ports_name}/ | Delete ports by ID
 *K8sdispatcherApi* | [**DeleteK8sdispatcherPortsListByID**](docs/K8sdispatcherApi.md#deletek8sdispatcherportslistbyid) | **Delete** /k8sdispatcher/{name}/ports/ | Delete ports by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherByID**](docs/K8sdispatcherApi.md#readk8sdispatcherbyid) | **Get** /k8sdispatcher/{name}/ | Read k8sdispatcher by ID
+*K8sdispatcherApi* | [**ReadK8sdispatcherDynOptByID**](docs/K8sdispatcherApi.md#readk8sdispatcherdynoptbyid) | **Get** /k8sdispatcher/{name}/dyn-opt/ | Read dyn-opt by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherInternalSrcIpByID**](docs/K8sdispatcherApi.md#readk8sdispatcherinternalsrcipbyid) | **Get** /k8sdispatcher/{name}/internal-src-ip/ | Read internal-src-ip by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherListByID**](docs/K8sdispatcherApi.md#readk8sdispatcherlistbyid) | **Get** /k8sdispatcher/ | Read k8sdispatcher by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherLoglevelByID**](docs/K8sdispatcherApi.md#readk8sdispatcherloglevelbyid) | **Get** /k8sdispatcher/{name}/loglevel/ | Read loglevel by ID
@@ -56,6 +57,7 @@ Class | Method | HTTP request | Description
 *K8sdispatcherApi* | [**ReadK8sdispatcherSessionRuleOriginatingRuleByID**](docs/K8sdispatcherApi.md#readk8sdispatchersessionruleoriginatingrulebyid) | **Get** /k8sdispatcher/{name}/session-rule/{direction}/{src-ip}/{dst-ip}/{src-port}/{dst-port}/{proto}/originating-rule/ | Read originating-rule by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherShadowByID**](docs/K8sdispatcherApi.md#readk8sdispatchershadowbyid) | **Get** /k8sdispatcher/{name}/shadow/ | Read shadow by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherSpanByID**](docs/K8sdispatcherApi.md#readk8sdispatcherspanbyid) | **Get** /k8sdispatcher/{name}/span/ | Read span by ID
+*K8sdispatcherApi* | [**ReadK8sdispatcherStartMorpheusByID**](docs/K8sdispatcherApi.md#readk8sdispatcherstartmorpheusbyid) | **Get** /k8sdispatcher/{name}/start-morpheus/ | Read start-morpheus by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherTypeByID**](docs/K8sdispatcherApi.md#readk8sdispatchertypebyid) | **Get** /k8sdispatcher/{name}/type/ | Read type by ID
 *K8sdispatcherApi* | [**ReadK8sdispatcherUuidByID**](docs/K8sdispatcherApi.md#readk8sdispatcheruuidbyid) | **Get** /k8sdispatcher/{name}/uuid/ | Read uuid by ID
 *K8sdispatcherApi* | [**ReplaceK8sdispatcherByID**](docs/K8sdispatcherApi.md#replacek8sdispatcherbyid) | **Put** /k8sdispatcher/{name}/ | Replace k8sdispatcher by ID
@@ -74,6 +76,7 @@ Class | Method | HTTP request | Description
 *K8sdispatcherApi* | [**UpdateK8sdispatcherPortsListByID**](docs/K8sdispatcherApi.md#updatek8sdispatcherportslistbyid) | **Patch** /k8sdispatcher/{name}/ports/ | Update ports by ID
 *K8sdispatcherApi* | [**UpdateK8sdispatcherPortsPeerByID**](docs/K8sdispatcherApi.md#updatek8sdispatcherportspeerbyid) | **Patch** /k8sdispatcher/{name}/ports/{ports_name}/peer/ | Update peer by ID
 *K8sdispatcherApi* | [**UpdateK8sdispatcherSpanByID**](docs/K8sdispatcherApi.md#updatek8sdispatcherspanbyid) | **Patch** /k8sdispatcher/{name}/span/ | Update span by ID
+*K8sdispatcherApi* | [**UpdateK8sdispatcherStartMorpheusByID**](docs/K8sdispatcherApi.md#updatek8sdispatcherstartmorpheusbyid) | **Patch** /k8sdispatcher/{name}/start-morpheus/ | Update start-morpheus by ID
 
 
 ## Documentation For Models
diff --git a/polycube/clients/k8sdispatcher/api_k8sdispatcher.go b/polycube/clients/k8sdispatcher/api_k8sdispatcher.go
index 3b8e25a..b4e7c71 100644
--- a/polycube/clients/k8sdispatcher/api_k8sdispatcher.go
+++ b/polycube/clients/k8sdispatcher/api_k8sdispatcher.go
@@ -1,3 +1,4 @@
+
 /*
  * k8sdispatcher API
  *
@@ -11,11 +12,11 @@ package swagger
 
 import (
 	"context"
-	"fmt"
 	"io/ioutil"
 	"net/http"
 	"net/url"
 	"strings"
+	"fmt"
 )
 
 // Linger please
@@ -40,6 +41,7 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -85,12 +87,13 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -114,6 +117,7 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherNodeportRuleByID(ctx contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -161,12 +165,13 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherNodeportRuleByID(ctx contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -188,6 +193,7 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherNodeportRuleListByID(ctx co
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -233,12 +239,13 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherNodeportRuleListByID(ctx co
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -261,6 +268,7 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherPortsByID(ctx context.Conte
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -307,12 +315,13 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherPortsByID(ctx context.Conte
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -334,6 +343,7 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherPortsListByID(ctx context.C
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -379,12 +389,13 @@ func (a *K8sdispatcherApiService) CreateK8sdispatcherPortsListByID(ctx context.C
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -405,6 +416,7 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -448,12 +460,13 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -476,6 +489,7 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherNodeportRuleByID(ctx contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -521,12 +535,13 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherNodeportRuleByID(ctx contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -547,6 +562,7 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherNodeportRuleListByID(ctx co
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -590,12 +606,13 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherNodeportRuleListByID(ctx co
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -617,6 +634,7 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherPortsByID(ctx context.Conte
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -661,12 +679,13 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherPortsByID(ctx context.Conte
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -687,6 +706,7 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherPortsListByID(ctx context.C
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -730,12 +750,13 @@ func (a *K8sdispatcherApiService) DeleteK8sdispatcherPortsListByID(ctx context.C
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -752,10 +773,10 @@ Read operation of resource: k8sdispatcher
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherByID(ctx context.Context, name string) (K8sdispatcher, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue K8sdispatcher
 	)
 
@@ -802,27 +823,114 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherByID(ctx context.Context, nam
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v K8sdispatcher
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
+
+	return localVarReturnValue, localVarHttpResponse, nil
+}
 
+/*
+K8sdispatcherApiService Read dyn-opt by ID
+Read operation of resource: dyn-opt
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return bool
+*/
+func (a *K8sdispatcherApiService) ReadK8sdispatcherDynOptByID(ctx context.Context, name string) (bool, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/k8sdispatcher/{name}/dyn-opt/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -839,10 +947,10 @@ Read operation of resource: internal-src-ip
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherInternalSrcIpByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -889,27 +997,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherInternalSrcIpByID(ctx context
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -925,10 +1033,10 @@ Read operation of resource: k8sdispatcher
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherListByID(ctx context.Context) ([]K8sdispatcher, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []K8sdispatcher
 	)
 
@@ -974,27 +1082,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherListByID(ctx context.Context)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []K8sdispatcher
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1011,10 +1119,10 @@ Read operation of resource: loglevel
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherLoglevelByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1061,27 +1169,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherLoglevelByID(ctx context.Cont
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1098,10 +1206,10 @@ Read operation of resource: nodeport-range
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRangeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1148,27 +1256,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRangeByID(ctx context
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1187,10 +1295,10 @@ Read operation of resource: nodeport-rule
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleByID(ctx context.Context, name string, nodeportPort int32, proto string) (NodeportRule, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue NodeportRule
 	)
 
@@ -1239,27 +1347,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleByID(ctx context.
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v NodeportRule
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1278,10 +1386,10 @@ Read operation of resource: external-traffic-policy
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleExternalTrafficPolicyByID(ctx context.Context, name string, nodeportPort int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1330,27 +1438,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleExternalTrafficPo
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1367,10 +1475,10 @@ Read operation of resource: nodeport-rule
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleListByID(ctx context.Context, name string) ([]NodeportRule, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []NodeportRule
 	)
 
@@ -1417,27 +1525,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleListByID(ctx cont
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []NodeportRule
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1456,10 +1564,10 @@ Read operation of resource: rule-name
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleRuleNameByID(ctx context.Context, name string, nodeportPort int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1508,27 +1616,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherNodeportRuleRuleNameByID(ctx
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1546,10 +1654,10 @@ Read operation of resource: ports
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsByID(ctx context.Context, name string, portsName string) (Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Ports
 	)
 
@@ -1597,27 +1705,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsByID(ctx context.Context
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1635,10 +1743,10 @@ Read operation of resource: ip
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsIpByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1686,27 +1794,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsIpByID(ctx context.Conte
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1723,10 +1831,10 @@ Read operation of resource: ports
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsListByID(ctx context.Context, name string) ([]Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Ports
 	)
 
@@ -1773,27 +1881,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsListByID(ctx context.Con
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1811,10 +1919,10 @@ Read operation of resource: peer
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsPeerByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1862,27 +1970,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsPeerByID(ctx context.Con
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1900,10 +2008,10 @@ Read operation of resource: status
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsStatusByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1951,27 +2059,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsStatusByID(ctx context.C
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1989,10 +2097,10 @@ Read operation of resource: type
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsTypeByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2040,27 +2148,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsTypeByID(ctx context.Con
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2078,10 +2186,10 @@ Read operation of resource: uuid
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsUuidByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2129,27 +2237,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherPortsUuidByID(ctx context.Con
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2166,10 +2274,10 @@ Read operation of resource: service-name
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherServiceNameByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2216,27 +2324,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherServiceNameByID(ctx context.C
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2259,10 +2367,10 @@ Read operation of resource: session-rule
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleByID(ctx context.Context, name string, direction string, srcIp string, dstIp string, srcPort int32, dstPort int32, proto string) (SessionRule, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue SessionRule
 	)
 
@@ -2315,27 +2423,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleByID(ctx context.C
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v SessionRule
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2352,10 +2460,10 @@ Read operation of resource: session-rule
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleListByID(ctx context.Context, name string) ([]SessionRule, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []SessionRule
 	)
 
@@ -2402,27 +2510,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleListByID(ctx conte
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []SessionRule
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2445,10 +2553,10 @@ Read operation of resource: new-ip
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleNewIpByID(ctx context.Context, name string, direction string, srcIp string, dstIp string, srcPort int32, dstPort int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2501,27 +2609,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleNewIpByID(ctx cont
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2544,10 +2652,10 @@ Read operation of resource: new-port
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleNewPortByID(ctx context.Context, name string, direction string, srcIp string, dstIp string, srcPort int32, dstPort int32, proto string) (int32, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue int32
 	)
 
@@ -2600,27 +2708,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleNewPortByID(ctx co
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v int32
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2643,10 +2751,10 @@ Read operation of resource: operation
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleOperationByID(ctx context.Context, name string, direction string, srcIp string, dstIp string, srcPort int32, dstPort int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2699,27 +2807,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleOperationByID(ctx
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2742,10 +2850,10 @@ Read operation of resource: originating-rule
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleOriginatingRuleByID(ctx context.Context, name string, direction string, srcIp string, dstIp string, srcPort int32, dstPort int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2798,27 +2906,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSessionRuleOriginatingRuleByI
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2835,10 +2943,10 @@ Read operation of resource: shadow
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherShadowByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -2885,27 +2993,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherShadowByID(ctx context.Contex
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2922,10 +3030,10 @@ Read operation of resource: span
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherSpanByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -2972,27 +3080,114 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherSpanByID(ctx context.Context,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
+
+	return localVarReturnValue, localVarHttpResponse, nil
+}
 
+/*
+K8sdispatcherApiService Read start-morpheus by ID
+Read operation of resource: start-morpheus
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return bool
+*/
+func (a *K8sdispatcherApiService) ReadK8sdispatcherStartMorpheusByID(ctx context.Context, name string) (bool, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/k8sdispatcher/{name}/start-morpheus/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3009,10 +3204,10 @@ Read operation of resource: type
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherTypeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3059,27 +3254,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherTypeByID(ctx context.Context,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3096,10 +3291,10 @@ Read operation of resource: uuid
 */
 func (a *K8sdispatcherApiService) ReadK8sdispatcherUuidByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3146,27 +3341,27 @@ func (a *K8sdispatcherApiService) ReadK8sdispatcherUuidByID(ctx context.Context,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3188,6 +3383,7 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3233,12 +3429,13 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3262,6 +3459,7 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherNodeportRuleByID(ctx conte
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3309,12 +3507,13 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherNodeportRuleByID(ctx conte
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3336,6 +3535,7 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherNodeportRuleListByID(ctx c
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3381,12 +3581,13 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherNodeportRuleListByID(ctx c
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3409,6 +3610,7 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherPortsByID(ctx context.Cont
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3455,12 +3657,13 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherPortsByID(ctx context.Cont
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3482,6 +3685,7 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherPortsListByID(ctx context.
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3527,12 +3731,13 @@ func (a *K8sdispatcherApiService) ReplaceK8sdispatcherPortsListByID(ctx context.
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3554,6 +3759,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3599,12 +3805,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3625,6 +3832,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherListByID(ctx context.Contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3669,12 +3877,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherListByID(ctx context.Contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3696,6 +3905,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherLoglevelByID(ctx context.Co
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3741,12 +3951,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherLoglevelByID(ctx context.Co
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3768,6 +3979,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRangeByID(ctx conte
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3813,12 +4025,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRangeByID(ctx conte
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3842,6 +4055,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleByID(ctx contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3889,12 +4103,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleByID(ctx contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3918,6 +4133,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleExternalTraffic
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3965,12 +4181,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleExternalTraffic
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3992,6 +4209,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleListByID(ctx co
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4037,12 +4255,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherNodeportRuleListByID(ctx co
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4065,6 +4284,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsByID(ctx context.Conte
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4111,12 +4331,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsByID(ctx context.Conte
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4138,6 +4359,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsListByID(ctx context.C
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4183,12 +4405,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsListByID(ctx context.C
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4211,6 +4434,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsPeerByID(ctx context.C
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4257,12 +4481,13 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherPortsPeerByID(ctx context.C
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4284,6 +4509,7 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherSpanByID(ctx context.Contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4329,14 +4555,90 @@ func (a *K8sdispatcherApiService) UpdateK8sdispatcherSpanByID(ctx context.Contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
+		
+		return localVarHttpResponse, newErr
+	}
+
+	return localVarHttpResponse, nil
+}
+
+/*
+K8sdispatcherApiService Update start-morpheus by ID
+Update operation of resource: start-morpheus
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+ * @param startMorpheus Set this flag if you want to start Morpheus compiler
+
+
+*/
+func (a *K8sdispatcherApiService) UpdateK8sdispatcherStartMorpheusByID(ctx context.Context, name string, startMorpheus bool) (*http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Patch")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		
+	)
 
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/k8sdispatcher/{name}/start-morpheus/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	// body params
+	localVarPostBody = &startMorpheus
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarHttpResponse, err
+	}
+
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
 		return localVarHttpResponse, newErr
 	}
 
 	return localVarHttpResponse, nil
 }
+
diff --git a/polycube/clients/k8sdispatcher/client.go b/polycube/clients/k8sdispatcher/client.go
index 0f560e6..eb25808 100644
--- a/polycube/clients/k8sdispatcher/client.go
+++ b/polycube/clients/k8sdispatcher/client.go
@@ -309,23 +309,6 @@ func (c *APIClient) prepareRequest(
 	return localVarRequest, nil
 }
 
-func removeLinks(b []byte) ([]byte, error) {
-	var arr []interface{}
-	if err := json.Unmarshal(b, &arr); err != nil {
-		return nil, err
-	}
-	for i, el := range arr {
-		if reflect.TypeOf(el).Kind() == reflect.Slice {
-			last := len(arr) - 1
-			arr[i] = arr[last]
-			arr[last] = nil
-			arr = arr[:last]
-			return json.Marshal(&arr)
-		}
-	}
-	return b, nil
-}
-
 func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
 	if strings.Contains(contentType, "application/xml") {
 		if err = xml.Unmarshal(b, v); err != nil {
@@ -348,6 +331,23 @@ func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err err
 	return errors.New("undefined response type")
 }
 
+func removeLinks(b []byte) ([]byte, error) {
+	var arr []interface{}
+	if err := json.Unmarshal(b, &arr); err != nil {
+		return nil, err
+	}
+	for i, el := range arr {
+		if reflect.TypeOf(el).Kind() == reflect.Slice {
+			last := len(arr) - 1
+			arr[i] = arr[last]
+			arr[last] = nil
+			arr = arr[:last]
+			return json.Marshal(&arr)
+		}
+	}
+	return b, nil
+}
+
 // Add a file to the multipart request
 func addFile(w *multipart.Writer, fieldName, path string) error {
 	file, err := os.Open(path)
diff --git a/polycube/clients/k8sdispatcher/model_k8sdispatcher.go b/polycube/clients/k8sdispatcher/model_k8sdispatcher.go
index bdba684..1b0f10a 100644
--- a/polycube/clients/k8sdispatcher/model_k8sdispatcher.go
+++ b/polycube/clients/k8sdispatcher/model_k8sdispatcher.go
@@ -19,6 +19,10 @@ type K8sdispatcher struct {
 	ServiceName string `json:"service-name,omitempty"`
 	// Logging level of a cube, from none (OFF) to the most verbose (TRACE)
 	Loglevel string `json:"loglevel,omitempty"`
+	// Defines if the service should be automatically optimized by Morpheus
+	DynOpt bool `json:"dyn-opt,omitempty"`
+	// Set this flag if you want to start Morpheus compiler
+	StartMorpheus bool `json:"start-morpheus,omitempty"`
 	// Entry of the ports table
 	Ports []Ports `json:"ports,omitempty"`
 	// Defines if the service is visible in Linux
diff --git a/polycube/clients/lbrp/README.md b/polycube/clients/lbrp/README.md
index 254a67c..2203df0 100644
--- a/polycube/clients/lbrp/README.md
+++ b/polycube/clients/lbrp/README.md
@@ -38,9 +38,12 @@ Class | Method | HTTP request | Description
 *LbrpApi* | [**DeleteLbrpServiceListByID**](docs/LbrpApi.md#deletelbrpservicelistbyid) | **Delete** /lbrp/{name}/service/ | Delete service by ID
 *LbrpApi* | [**DeleteLbrpSrcIpRewriteByID**](docs/LbrpApi.md#deletelbrpsrciprewritebyid) | **Delete** /lbrp/{name}/src-ip-rewrite/ | Delete src-ip-rewrite by ID
 *LbrpApi* | [**ReadLbrpByID**](docs/LbrpApi.md#readlbrpbyid) | **Get** /lbrp/{name}/ | Read lbrp by ID
+*LbrpApi* | [**ReadLbrpDynOptByID**](docs/LbrpApi.md#readlbrpdynoptbyid) | **Get** /lbrp/{name}/dyn-opt/ | Read dyn-opt by ID
 *LbrpApi* | [**ReadLbrpListByID**](docs/LbrpApi.md#readlbrplistbyid) | **Get** /lbrp/ | Read lbrp by ID
 *LbrpApi* | [**ReadLbrpLoglevelByID**](docs/LbrpApi.md#readlbrploglevelbyid) | **Get** /lbrp/{name}/loglevel/ | Read loglevel by ID
+*LbrpApi* | [**ReadLbrpPortModeByID**](docs/LbrpApi.md#readlbrpportmodebyid) | **Get** /lbrp/{name}/port_mode/ | Read port_mode by ID
 *LbrpApi* | [**ReadLbrpPortsByID**](docs/LbrpApi.md#readlbrpportsbyid) | **Get** /lbrp/{name}/ports/{ports_name}/ | Read ports by ID
+*LbrpApi* | [**ReadLbrpPortsIpByID**](docs/LbrpApi.md#readlbrpportsipbyid) | **Get** /lbrp/{name}/ports/{ports_name}/ip/ | Read ip by ID
 *LbrpApi* | [**ReadLbrpPortsListByID**](docs/LbrpApi.md#readlbrpportslistbyid) | **Get** /lbrp/{name}/ports/ | Read ports by ID
 *LbrpApi* | [**ReadLbrpPortsPeerByID**](docs/LbrpApi.md#readlbrpportspeerbyid) | **Get** /lbrp/{name}/ports/{ports_name}/peer/ | Read peer by ID
 *LbrpApi* | [**ReadLbrpPortsStatusByID**](docs/LbrpApi.md#readlbrpportsstatusbyid) | **Get** /lbrp/{name}/ports/{ports_name}/status/ | Read status by ID
@@ -60,6 +63,7 @@ Class | Method | HTTP request | Description
 *LbrpApi* | [**ReadLbrpSrcIpRewriteByID**](docs/LbrpApi.md#readlbrpsrciprewritebyid) | **Get** /lbrp/{name}/src-ip-rewrite/ | Read src-ip-rewrite by ID
 *LbrpApi* | [**ReadLbrpSrcIpRewriteIpRangeByID**](docs/LbrpApi.md#readlbrpsrciprewriteiprangebyid) | **Get** /lbrp/{name}/src-ip-rewrite/ip-range/ | Read ip-range by ID
 *LbrpApi* | [**ReadLbrpSrcIpRewriteNewIpRangeByID**](docs/LbrpApi.md#readlbrpsrciprewritenewiprangebyid) | **Get** /lbrp/{name}/src-ip-rewrite/new_ip_range/ | Read new_ip_range by ID
+*LbrpApi* | [**ReadLbrpStartMorpheusByID**](docs/LbrpApi.md#readlbrpstartmorpheusbyid) | **Get** /lbrp/{name}/start-morpheus/ | Read start-morpheus by ID
 *LbrpApi* | [**ReadLbrpTypeByID**](docs/LbrpApi.md#readlbrptypebyid) | **Get** /lbrp/{name}/type/ | Read type by ID
 *LbrpApi* | [**ReadLbrpUuidByID**](docs/LbrpApi.md#readlbrpuuidbyid) | **Get** /lbrp/{name}/uuid/ | Read uuid by ID
 *LbrpApi* | [**ReplaceLbrpByID**](docs/LbrpApi.md#replacelbrpbyid) | **Put** /lbrp/{name}/ | Replace lbrp by ID
@@ -73,7 +77,9 @@ Class | Method | HTTP request | Description
 *LbrpApi* | [**UpdateLbrpByID**](docs/LbrpApi.md#updatelbrpbyid) | **Patch** /lbrp/{name}/ | Update lbrp by ID
 *LbrpApi* | [**UpdateLbrpListByID**](docs/LbrpApi.md#updatelbrplistbyid) | **Patch** /lbrp/ | Update lbrp by ID
 *LbrpApi* | [**UpdateLbrpLoglevelByID**](docs/LbrpApi.md#updatelbrploglevelbyid) | **Patch** /lbrp/{name}/loglevel/ | Update loglevel by ID
+*LbrpApi* | [**UpdateLbrpPortModeByID**](docs/LbrpApi.md#updatelbrpportmodebyid) | **Patch** /lbrp/{name}/port_mode/ | Update port_mode by ID
 *LbrpApi* | [**UpdateLbrpPortsByID**](docs/LbrpApi.md#updatelbrpportsbyid) | **Patch** /lbrp/{name}/ports/{ports_name}/ | Update ports by ID
+*LbrpApi* | [**UpdateLbrpPortsIpByID**](docs/LbrpApi.md#updatelbrpportsipbyid) | **Patch** /lbrp/{name}/ports/{ports_name}/ip/ | Update ip by ID
 *LbrpApi* | [**UpdateLbrpPortsListByID**](docs/LbrpApi.md#updatelbrpportslistbyid) | **Patch** /lbrp/{name}/ports/ | Update ports by ID
 *LbrpApi* | [**UpdateLbrpPortsPeerByID**](docs/LbrpApi.md#updatelbrpportspeerbyid) | **Patch** /lbrp/{name}/ports/{ports_name}/peer/ | Update peer by ID
 *LbrpApi* | [**UpdateLbrpPortsTypeByID**](docs/LbrpApi.md#updatelbrpportstypebyid) | **Patch** /lbrp/{name}/ports/{ports_name}/type/ | Update type by ID
@@ -89,6 +95,7 @@ Class | Method | HTTP request | Description
 *LbrpApi* | [**UpdateLbrpSrcIpRewriteByID**](docs/LbrpApi.md#updatelbrpsrciprewritebyid) | **Patch** /lbrp/{name}/src-ip-rewrite/ | Update src-ip-rewrite by ID
 *LbrpApi* | [**UpdateLbrpSrcIpRewriteIpRangeByID**](docs/LbrpApi.md#updatelbrpsrciprewriteiprangebyid) | **Patch** /lbrp/{name}/src-ip-rewrite/ip-range/ | Update ip-range by ID
 *LbrpApi* | [**UpdateLbrpSrcIpRewriteNewIpRangeByID**](docs/LbrpApi.md#updatelbrpsrciprewritenewiprangebyid) | **Patch** /lbrp/{name}/src-ip-rewrite/new_ip_range/ | Update new_ip_range by ID
+*LbrpApi* | [**UpdateLbrpStartMorpheusByID**](docs/LbrpApi.md#updatelbrpstartmorpheusbyid) | **Patch** /lbrp/{name}/start-morpheus/ | Update start-morpheus by ID
 
 
 ## Documentation For Models
diff --git a/polycube/clients/lbrp/api_lbrp.go b/polycube/clients/lbrp/api_lbrp.go
index 7681f6c..e4253e2 100644
--- a/polycube/clients/lbrp/api_lbrp.go
+++ b/polycube/clients/lbrp/api_lbrp.go
@@ -1,3 +1,4 @@
+
 /*
  * lbrp API
  *
@@ -11,11 +12,11 @@ package swagger
 
 import (
 	"context"
-	"fmt"
 	"io/ioutil"
 	"net/http"
 	"net/url"
 	"strings"
+	"fmt"
 )
 
 // Linger please
@@ -40,6 +41,7 @@ func (a *LbrpApiService) CreateLbrpByID(ctx context.Context, name string, lbrp L
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -85,12 +87,13 @@ func (a *LbrpApiService) CreateLbrpByID(ctx context.Context, name string, lbrp L
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -113,6 +116,7 @@ func (a *LbrpApiService) CreateLbrpPortsByID(ctx context.Context, name string, p
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -159,12 +163,13 @@ func (a *LbrpApiService) CreateLbrpPortsByID(ctx context.Context, name string, p
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -186,6 +191,7 @@ func (a *LbrpApiService) CreateLbrpPortsListByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -231,12 +237,13 @@ func (a *LbrpApiService) CreateLbrpPortsListByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -262,6 +269,7 @@ func (a *LbrpApiService) CreateLbrpServiceBackendByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -311,12 +319,13 @@ func (a *LbrpApiService) CreateLbrpServiceBackendByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -341,6 +350,7 @@ func (a *LbrpApiService) CreateLbrpServiceBackendListByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -389,12 +399,13 @@ func (a *LbrpApiService) CreateLbrpServiceBackendListByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -419,6 +430,7 @@ func (a *LbrpApiService) CreateLbrpServiceByID(ctx context.Context, name string,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -467,12 +479,13 @@ func (a *LbrpApiService) CreateLbrpServiceByID(ctx context.Context, name string,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -494,6 +507,7 @@ func (a *LbrpApiService) CreateLbrpServiceListByID(ctx context.Context, name str
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -539,12 +553,13 @@ func (a *LbrpApiService) CreateLbrpServiceListByID(ctx context.Context, name str
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -566,6 +581,7 @@ func (a *LbrpApiService) CreateLbrpSrcIpRewriteByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -611,12 +627,13 @@ func (a *LbrpApiService) CreateLbrpSrcIpRewriteByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -637,6 +654,7 @@ func (a *LbrpApiService) DeleteLbrpByID(ctx context.Context, name string) (*http
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -680,12 +698,13 @@ func (a *LbrpApiService) DeleteLbrpByID(ctx context.Context, name string) (*http
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -707,6 +726,7 @@ func (a *LbrpApiService) DeleteLbrpPortsByID(ctx context.Context, name string, p
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -751,12 +771,13 @@ func (a *LbrpApiService) DeleteLbrpPortsByID(ctx context.Context, name string, p
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -777,6 +798,7 @@ func (a *LbrpApiService) DeleteLbrpPortsListByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -820,12 +842,13 @@ func (a *LbrpApiService) DeleteLbrpPortsListByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -850,6 +873,7 @@ func (a *LbrpApiService) DeleteLbrpServiceBackendByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -897,12 +921,13 @@ func (a *LbrpApiService) DeleteLbrpServiceBackendByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -926,6 +951,7 @@ func (a *LbrpApiService) DeleteLbrpServiceBackendListByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -972,12 +998,13 @@ func (a *LbrpApiService) DeleteLbrpServiceBackendListByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1001,6 +1028,7 @@ func (a *LbrpApiService) DeleteLbrpServiceByID(ctx context.Context, name string,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1047,12 +1075,13 @@ func (a *LbrpApiService) DeleteLbrpServiceByID(ctx context.Context, name string,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1073,6 +1102,7 @@ func (a *LbrpApiService) DeleteLbrpServiceListByID(ctx context.Context, name str
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1116,12 +1146,13 @@ func (a *LbrpApiService) DeleteLbrpServiceListByID(ctx context.Context, name str
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1142,6 +1173,7 @@ func (a *LbrpApiService) DeleteLbrpSrcIpRewriteByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1185,12 +1217,13 @@ func (a *LbrpApiService) DeleteLbrpSrcIpRewriteByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1207,10 +1240,10 @@ Read operation of resource: lbrp
 */
 func (a *LbrpApiService) ReadLbrpByID(ctx context.Context, name string) (Lbrp, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Lbrp
 	)
 
@@ -1257,27 +1290,114 @@ func (a *LbrpApiService) ReadLbrpByID(ctx context.Context, name string) (Lbrp, *
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Lbrp
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
+
+	return localVarReturnValue, localVarHttpResponse, nil
+}
+
+/*
+LbrpApiService Read dyn-opt by ID
+Read operation of resource: dyn-opt
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return bool
+*/
+func (a *LbrpApiService) ReadLbrpDynOptByID(ctx context.Context, name string) (bool, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/dyn-opt/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1293,10 +1413,10 @@ Read operation of resource: lbrp
 */
 func (a *LbrpApiService) ReadLbrpListByID(ctx context.Context) ([]Lbrp, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Lbrp
 	)
 
@@ -1342,27 +1462,27 @@ func (a *LbrpApiService) ReadLbrpListByID(ctx context.Context) ([]Lbrp, *http.Re
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Lbrp
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1379,10 +1499,10 @@ Read operation of resource: loglevel
 */
 func (a *LbrpApiService) ReadLbrpLoglevelByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1429,27 +1549,114 @@ func (a *LbrpApiService) ReadLbrpLoglevelByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
+
+	return localVarReturnValue, localVarHttpResponse, nil
+}
+
+/*
+LbrpApiService Read port_mode by ID
+Read operation of resource: port_mode
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return string
+*/
+func (a *LbrpApiService) ReadLbrpPortModeByID(ctx context.Context, name string) (string, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue string
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/port_mode/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
 
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v string
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1467,10 +1674,10 @@ Read operation of resource: ports
 */
 func (a *LbrpApiService) ReadLbrpPortsByID(ctx context.Context, name string, portsName string) (Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Ports
 	)
 
@@ -1518,27 +1725,27 @@ func (a *LbrpApiService) ReadLbrpPortsByID(ctx context.Context, name string, por
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1546,25 +1753,27 @@ func (a *LbrpApiService) ReadLbrpPortsByID(ctx context.Context, name string, por
 }
 
 /*
-LbrpApiService Read ports by ID
-Read operation of resource: ports
+LbrpApiService Read ip by ID
+Read operation of resource: ip
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
+ * @param portsName ID of ports_name
 
-@return []Ports
+@return string
 */
-func (a *LbrpApiService) ReadLbrpPortsListByID(ctx context.Context, name string) ([]Ports, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpPortsIpByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
-		localVarReturnValue []Ports
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/ip/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
 	localVarHeaderParams := make(map[string]string)
 	localVarQueryParams := url.Values{}
@@ -1605,27 +1814,27 @@ func (a *LbrpApiService) ReadLbrpPortsListByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
-			var v []Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			var v string
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1633,27 +1842,25 @@ func (a *LbrpApiService) ReadLbrpPortsListByID(ctx context.Context, name string)
 }
 
 /*
-LbrpApiService Read peer by ID
-Read operation of resource: peer
+LbrpApiService Read ports by ID
+Read operation of resource: ports
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param portsName ID of ports_name
 
-@return string
+@return []Ports
 */
-func (a *LbrpApiService) ReadLbrpPortsPeerByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpPortsListByID(ctx context.Context, name string) ([]Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
-		localVarReturnValue string
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue []Ports
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/peer/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
-	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
 	localVarHeaderParams := make(map[string]string)
 	localVarQueryParams := url.Values{}
@@ -1694,27 +1901,27 @@ func (a *LbrpApiService) ReadLbrpPortsPeerByID(ctx context.Context, name string,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
-			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			var v []Ports
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1722,25 +1929,25 @@ func (a *LbrpApiService) ReadLbrpPortsPeerByID(ctx context.Context, name string,
 }
 
 /*
-LbrpApiService Read status by ID
-Read operation of resource: status
+LbrpApiService Read peer by ID
+Read operation of resource: peer
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
  * @param portsName ID of ports_name
 
 @return string
 */
-func (a *LbrpApiService) ReadLbrpPortsStatusByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpPortsPeerByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/status/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/peer/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
@@ -1783,27 +1990,27 @@ func (a *LbrpApiService) ReadLbrpPortsStatusByID(ctx context.Context, name strin
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1811,25 +2018,25 @@ func (a *LbrpApiService) ReadLbrpPortsStatusByID(ctx context.Context, name strin
 }
 
 /*
-LbrpApiService Read type by ID
-Read operation of resource: type
+LbrpApiService Read status by ID
+Read operation of resource: status
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
  * @param portsName ID of ports_name
 
 @return string
 */
-func (a *LbrpApiService) ReadLbrpPortsTypeByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpPortsStatusByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/type/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/status/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
@@ -1872,27 +2079,27 @@ func (a *LbrpApiService) ReadLbrpPortsTypeByID(ctx context.Context, name string,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1900,25 +2107,25 @@ func (a *LbrpApiService) ReadLbrpPortsTypeByID(ctx context.Context, name string,
 }
 
 /*
-LbrpApiService Read ip by ID
-Read operation of resource: ip
+LbrpApiService Read type by ID
+Read operation of resource: type
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
  * @param portsName ID of ports_name
 
 @return string
 */
-func (a *LbrpApiService) ReadLbrpPortsIpByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpPortsTypeByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/ip/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/type/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
@@ -1961,27 +2168,27 @@ func (a *LbrpApiService) ReadLbrpPortsIpByID(ctx context.Context, name string, p
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1999,10 +2206,10 @@ Read operation of resource: uuid
 */
 func (a *LbrpApiService) ReadLbrpPortsUuidByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2050,27 +2257,27 @@ func (a *LbrpApiService) ReadLbrpPortsUuidByID(ctx context.Context, name string,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2091,10 +2298,10 @@ Read operation of resource: backend
 */
 func (a *LbrpApiService) ReadLbrpServiceBackendByID(ctx context.Context, name string, vip string, vport int32, proto string, ip string) (ServiceBackend, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue ServiceBackend
 	)
 
@@ -2145,27 +2352,27 @@ func (a *LbrpApiService) ReadLbrpServiceBackendByID(ctx context.Context, name st
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v ServiceBackend
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2185,10 +2392,10 @@ Read operation of resource: backend
 */
 func (a *LbrpApiService) ReadLbrpServiceBackendListByID(ctx context.Context, name string, vip string, vport int32, proto string) ([]ServiceBackend, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []ServiceBackend
 	)
 
@@ -2238,27 +2445,27 @@ func (a *LbrpApiService) ReadLbrpServiceBackendListByID(ctx context.Context, nam
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []ServiceBackend
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2279,10 +2486,10 @@ Read operation of resource: name
 */
 func (a *LbrpApiService) ReadLbrpServiceBackendNameByID(ctx context.Context, name string, vip string, vport int32, proto string, ip string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2333,27 +2540,27 @@ func (a *LbrpApiService) ReadLbrpServiceBackendNameByID(ctx context.Context, nam
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2374,10 +2581,10 @@ Read operation of resource: port
 */
 func (a *LbrpApiService) ReadLbrpServiceBackendPortByID(ctx context.Context, name string, vip string, vport int32, proto string, ip string) (int32, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue int32
 	)
 
@@ -2428,27 +2635,27 @@ func (a *LbrpApiService) ReadLbrpServiceBackendPortByID(ctx context.Context, nam
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v int32
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2469,10 +2676,10 @@ Read operation of resource: weight
 */
 func (a *LbrpApiService) ReadLbrpServiceBackendWeightByID(ctx context.Context, name string, vip string, vport int32, proto string, ip string) (int32, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue int32
 	)
 
@@ -2523,27 +2730,27 @@ func (a *LbrpApiService) ReadLbrpServiceBackendWeightByID(ctx context.Context, n
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v int32
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2563,10 +2770,10 @@ Read operation of resource: service
 */
 func (a *LbrpApiService) ReadLbrpServiceByID(ctx context.Context, name string, vip string, vport int32, proto string) (Service, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Service
 	)
 
@@ -2616,27 +2823,27 @@ func (a *LbrpApiService) ReadLbrpServiceByID(ctx context.Context, name string, v
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Service
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2653,10 +2860,10 @@ Read operation of resource: service
 */
 func (a *LbrpApiService) ReadLbrpServiceListByID(ctx context.Context, name string) ([]Service, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Service
 	)
 
@@ -2703,27 +2910,27 @@ func (a *LbrpApiService) ReadLbrpServiceListByID(ctx context.Context, name strin
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Service
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2740,10 +2947,10 @@ Read operation of resource: service-name
 */
 func (a *LbrpApiService) ReadLbrpServiceNameByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2790,27 +2997,27 @@ func (a *LbrpApiService) ReadLbrpServiceNameByID(ctx context.Context, name strin
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2830,10 +3037,10 @@ Read operation of resource: name
 */
 func (a *LbrpApiService) ReadLbrpServiceNameByID_1(ctx context.Context, name string, vip string, vport int32, proto string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2883,27 +3090,27 @@ func (a *LbrpApiService) ReadLbrpServiceNameByID_1(ctx context.Context, name str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2920,10 +3127,10 @@ Read operation of resource: shadow
 */
 func (a *LbrpApiService) ReadLbrpShadowByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -2970,27 +3177,27 @@ func (a *LbrpApiService) ReadLbrpShadowByID(ctx context.Context, name string) (b
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3007,10 +3214,10 @@ Read operation of resource: span
 */
 func (a *LbrpApiService) ReadLbrpSpanByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -3057,27 +3264,27 @@ func (a *LbrpApiService) ReadLbrpSpanByID(ctx context.Context, name string) (boo
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3094,10 +3301,10 @@ Read operation of resource: src-ip-rewrite
 */
 func (a *LbrpApiService) ReadLbrpSrcIpRewriteByID(ctx context.Context, name string) (SrcIpRewrite, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue SrcIpRewrite
 	)
 
@@ -3144,27 +3351,27 @@ func (a *LbrpApiService) ReadLbrpSrcIpRewriteByID(ctx context.Context, name stri
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v SrcIpRewrite
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3181,10 +3388,10 @@ Read operation of resource: ip-range
 */
 func (a *LbrpApiService) ReadLbrpSrcIpRewriteIpRangeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3231,27 +3438,27 @@ func (a *LbrpApiService) ReadLbrpSrcIpRewriteIpRangeByID(ctx context.Context, na
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3268,10 +3475,10 @@ Read operation of resource: new_ip_range
 */
 func (a *LbrpApiService) ReadLbrpSrcIpRewriteNewIpRangeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3318,27 +3525,27 @@ func (a *LbrpApiService) ReadLbrpSrcIpRewriteNewIpRangeByID(ctx context.Context,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3346,24 +3553,24 @@ func (a *LbrpApiService) ReadLbrpSrcIpRewriteNewIpRangeByID(ctx context.Context,
 }
 
 /*
-LbrpApiService Read type by ID
-Read operation of resource: type
+LbrpApiService Read start-morpheus by ID
+Read operation of resource: start-morpheus
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
 
-@return string
+@return bool
 */
-func (a *LbrpApiService) ReadLbrpTypeByID(ctx context.Context, name string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpStartMorpheusByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
-		localVarReturnValue string
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/type/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/start-morpheus/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 
 	localVarHeaderParams := make(map[string]string)
@@ -3405,27 +3612,27 @@ func (a *LbrpApiService) ReadLbrpTypeByID(ctx context.Context, name string) (str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
-			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3433,24 +3640,24 @@ func (a *LbrpApiService) ReadLbrpTypeByID(ctx context.Context, name string) (str
 }
 
 /*
-LbrpApiService Read uuid by ID
-Read operation of resource: uuid
+LbrpApiService Read type by ID
+Read operation of resource: type
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
 
 @return string
 */
-func (a *LbrpApiService) ReadLbrpUuidByID(ctx context.Context, name string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpTypeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/uuid/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/type/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 
 	localVarHeaderParams := make(map[string]string)
@@ -3492,27 +3699,27 @@ func (a *LbrpApiService) ReadLbrpUuidByID(ctx context.Context, name string) (str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3520,24 +3727,24 @@ func (a *LbrpApiService) ReadLbrpUuidByID(ctx context.Context, name string) (str
 }
 
 /*
-LbrpApiService Read port mode by ID
-Read operation of resource: port_mode
+LbrpApiService Read uuid by ID
+Read operation of resource: uuid
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
 
 @return string
 */
-func (a *LbrpApiService) ReadLbrpPortModeByID(ctx context.Context, name string) (string, *http.Response, error) {
+func (a *LbrpApiService) ReadLbrpUuidByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/port_mode/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/uuid/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 
 	localVarHeaderParams := make(map[string]string)
@@ -3579,27 +3786,27 @@ func (a *LbrpApiService) ReadLbrpPortModeByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3621,6 +3828,7 @@ func (a *LbrpApiService) ReplaceLbrpByID(ctx context.Context, name string, lbrp
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3666,12 +3874,13 @@ func (a *LbrpApiService) ReplaceLbrpByID(ctx context.Context, name string, lbrp
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3694,6 +3903,7 @@ func (a *LbrpApiService) ReplaceLbrpPortsByID(ctx context.Context, name string,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3740,12 +3950,13 @@ func (a *LbrpApiService) ReplaceLbrpPortsByID(ctx context.Context, name string,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3767,6 +3978,7 @@ func (a *LbrpApiService) ReplaceLbrpPortsListByID(ctx context.Context, name stri
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3812,12 +4024,13 @@ func (a *LbrpApiService) ReplaceLbrpPortsListByID(ctx context.Context, name stri
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3843,6 +4056,7 @@ func (a *LbrpApiService) ReplaceLbrpServiceBackendByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3892,12 +4106,13 @@ func (a *LbrpApiService) ReplaceLbrpServiceBackendByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3922,6 +4137,7 @@ func (a *LbrpApiService) ReplaceLbrpServiceBackendListByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3970,12 +4186,13 @@ func (a *LbrpApiService) ReplaceLbrpServiceBackendListByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4000,6 +4217,7 @@ func (a *LbrpApiService) ReplaceLbrpServiceByID(ctx context.Context, name string
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4048,12 +4266,13 @@ func (a *LbrpApiService) ReplaceLbrpServiceByID(ctx context.Context, name string
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4075,6 +4294,7 @@ func (a *LbrpApiService) ReplaceLbrpServiceListByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4120,12 +4340,13 @@ func (a *LbrpApiService) ReplaceLbrpServiceListByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4147,6 +4368,7 @@ func (a *LbrpApiService) ReplaceLbrpSrcIpRewriteByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4192,12 +4414,13 @@ func (a *LbrpApiService) ReplaceLbrpSrcIpRewriteByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4219,6 +4442,7 @@ func (a *LbrpApiService) UpdateLbrpByID(ctx context.Context, name string, lbrp L
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4264,12 +4488,13 @@ func (a *LbrpApiService) UpdateLbrpByID(ctx context.Context, name string, lbrp L
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4290,6 +4515,7 @@ func (a *LbrpApiService) UpdateLbrpListByID(ctx context.Context, lbrp []Lbrp) (*
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4334,12 +4560,13 @@ func (a *LbrpApiService) UpdateLbrpListByID(ctx context.Context, lbrp []Lbrp) (*
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4351,7 +4578,7 @@ LbrpApiService Update loglevel by ID
 Update operation of resource: loglevel
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param loglevel Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
+ * @param loglevel Logging level of a cube, from none (OFF) to the most verbose (TRACE)
 
 
 */
@@ -4361,6 +4588,7 @@ func (a *LbrpApiService) UpdateLbrpLoglevelByID(ctx context.Context, name string
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4406,12 +4634,87 @@ func (a *LbrpApiService) UpdateLbrpLoglevelByID(ctx context.Context, name string
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
+		
+		return localVarHttpResponse, newErr
+	}
+
+	return localVarHttpResponse, nil
+}
+
+/*
+LbrpApiService Update port_mode by ID
+Update operation of resource: port_mode
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+ * @param portMode LB mode of operation. &#39;SINGLE&#39; is optimized for working with a single FRONTEND port. &#39;MULTI&#39; allows to manage multiple FRONTEND port
+
+
+*/
+func (a *LbrpApiService) UpdateLbrpPortModeByID(ctx context.Context, name string, portMode string) (*http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Patch")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/port_mode/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	// body params
+	localVarPostBody = &portMode
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarHttpResponse, err
+	}
 
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4434,6 +4737,7 @@ func (a *LbrpApiService) UpdateLbrpPortsByID(ctx context.Context, name string, p
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4480,12 +4784,13 @@ func (a *LbrpApiService) UpdateLbrpPortsByID(ctx context.Context, name string, p
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4493,25 +4798,28 @@ func (a *LbrpApiService) UpdateLbrpPortsByID(ctx context.Context, name string, p
 }
 
 /*
-LbrpApiService Update ports by ID
-Update operation of resource: ports
+LbrpApiService Update ip by ID
+Update operation of resource: ip
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param ports portsbody object
+ * @param portsName ID of ports_name
+ * @param ip IP address of the client interface (only for FRONTEND port)
 
 
 */
-func (a *LbrpApiService) UpdateLbrpPortsListByID(ctx context.Context, name string, ports []Ports) (*http.Response, error) {
+func (a *LbrpApiService) UpdateLbrpPortsIpByID(ctx context.Context, name string, portsName string, ip string) (*http.Response, error) {
 	var (
 		localVarHttpMethod = strings.ToUpper("Patch")
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/ip/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
 	localVarHeaderParams := make(map[string]string)
 	localVarQueryParams := url.Values{}
@@ -4535,7 +4843,7 @@ func (a *LbrpApiService) UpdateLbrpPortsListByID(ctx context.Context, name strin
 		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
 	}
 	// body params
-	localVarPostBody = &ports
+	localVarPostBody = &ip
 	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
 	if err != nil {
 		return nil, err
@@ -4552,12 +4860,13 @@ func (a *LbrpApiService) UpdateLbrpPortsListByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4565,27 +4874,26 @@ func (a *LbrpApiService) UpdateLbrpPortsListByID(ctx context.Context, name strin
 }
 
 /*
-LbrpApiService Update peer by ID
-Update operation of resource: peer
+LbrpApiService Update ports by ID
+Update operation of resource: ports
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param portsName ID of ports_name
- * @param peer Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)
+ * @param ports portsbody object
 
 
 */
-func (a *LbrpApiService) UpdateLbrpPortsPeerByID(ctx context.Context, name string, portsName string, peer string) (*http.Response, error) {
+func (a *LbrpApiService) UpdateLbrpPortsListByID(ctx context.Context, name string, ports []Ports) (*http.Response, error) {
 	var (
 		localVarHttpMethod = strings.ToUpper("Patch")
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/peer/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
-	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
 	localVarHeaderParams := make(map[string]string)
 	localVarQueryParams := url.Values{}
@@ -4609,7 +4917,7 @@ func (a *LbrpApiService) UpdateLbrpPortsPeerByID(ctx context.Context, name strin
 		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
 	}
 	// body params
-	localVarPostBody = &peer
+	localVarPostBody = &ports
 	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
 	if err != nil {
 		return nil, err
@@ -4626,12 +4934,13 @@ func (a *LbrpApiService) UpdateLbrpPortsPeerByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4639,25 +4948,26 @@ func (a *LbrpApiService) UpdateLbrpPortsPeerByID(ctx context.Context, name strin
 }
 
 /*
-LbrpApiService Update type by ID
-Update operation of resource: type
+LbrpApiService Update peer by ID
+Update operation of resource: peer
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
  * @param portsName ID of ports_name
- * @param type_ Type of the LB port (e.g. FRONTEND or BACKEND)
+ * @param peer Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;)
 
 
 */
-func (a *LbrpApiService) UpdateLbrpPortsTypeByID(ctx context.Context, name string, portsName string, type_ string) (*http.Response, error) {
+func (a *LbrpApiService) UpdateLbrpPortsPeerByID(ctx context.Context, name string, portsName string, peer string) (*http.Response, error) {
 	var (
 		localVarHttpMethod = strings.ToUpper("Patch")
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/type/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/peer/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
@@ -4683,7 +4993,7 @@ func (a *LbrpApiService) UpdateLbrpPortsTypeByID(ctx context.Context, name strin
 		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
 	}
 	// body params
-	localVarPostBody = &type_
+	localVarPostBody = &peer
 	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
 	if err != nil {
 		return nil, err
@@ -4700,12 +5010,13 @@ func (a *LbrpApiService) UpdateLbrpPortsTypeByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4713,25 +5024,26 @@ func (a *LbrpApiService) UpdateLbrpPortsTypeByID(ctx context.Context, name strin
 }
 
 /*
-LbrpApiService Update ip by ID
-Update operation of resource: ip
+LbrpApiService Update type by ID
+Update operation of resource: type
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
  * @param portsName ID of ports_name
- * @param ip_ IP address of the client interface (only for FRONTEND port)
+ * @param type_ Type of the LB port (e.g. FRONTEND or BACKEND)
 
 
 */
-func (a *LbrpApiService) UpdateLbrpPortsIpByID(ctx context.Context, name string, portsName string, ip_ string) (*http.Response, error) {
+func (a *LbrpApiService) UpdateLbrpPortsTypeByID(ctx context.Context, name string, portsName string, type_ string) (*http.Response, error) {
 	var (
 		localVarHttpMethod = strings.ToUpper("Patch")
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/ip/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/ports/{ports_name}/type/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 	localVarPath = strings.Replace(localVarPath, "{"+"ports_name"+"}", fmt.Sprintf("%v", portsName), -1)
 
@@ -4757,7 +5069,7 @@ func (a *LbrpApiService) UpdateLbrpPortsIpByID(ctx context.Context, name string,
 		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
 	}
 	// body params
-	localVarPostBody = &ip_
+	localVarPostBody = &type_
 	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
 	if err != nil {
 		return nil, err
@@ -4774,12 +5086,13 @@ func (a *LbrpApiService) UpdateLbrpPortsIpByID(ctx context.Context, name string,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4805,6 +5118,7 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4854,12 +5168,13 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4884,6 +5199,7 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendListByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4932,12 +5248,13 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendListByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4963,6 +5280,7 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendNameByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5012,12 +5330,13 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendNameByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5043,6 +5362,7 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendPortByID(ctx context.Context, n
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5092,12 +5412,13 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendPortByID(ctx context.Context, n
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5123,6 +5444,7 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendWeightByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5172,12 +5494,13 @@ func (a *LbrpApiService) UpdateLbrpServiceBackendWeightByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5202,6 +5525,7 @@ func (a *LbrpApiService) UpdateLbrpServiceByID(ctx context.Context, name string,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5250,12 +5574,13 @@ func (a *LbrpApiService) UpdateLbrpServiceByID(ctx context.Context, name string,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5277,6 +5602,7 @@ func (a *LbrpApiService) UpdateLbrpServiceListByID(ctx context.Context, name str
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5322,12 +5648,13 @@ func (a *LbrpApiService) UpdateLbrpServiceListByID(ctx context.Context, name str
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5352,6 +5679,7 @@ func (a *LbrpApiService) UpdateLbrpServiceNameByID(ctx context.Context, name str
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5400,12 +5728,13 @@ func (a *LbrpApiService) UpdateLbrpServiceNameByID(ctx context.Context, name str
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5427,6 +5756,7 @@ func (a *LbrpApiService) UpdateLbrpSpanByID(ctx context.Context, name string, sp
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5472,12 +5802,13 @@ func (a *LbrpApiService) UpdateLbrpSpanByID(ctx context.Context, name string, sp
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5499,6 +5830,7 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5544,12 +5876,13 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5571,6 +5904,7 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteIpRangeByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5616,12 +5950,13 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteIpRangeByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5643,6 +5978,7 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteNewIpRangeByID(ctx context.Contex
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5688,12 +6024,13 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteNewIpRangeByID(ctx context.Contex
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5701,24 +6038,25 @@ func (a *LbrpApiService) UpdateLbrpSrcIpRewriteNewIpRangeByID(ctx context.Contex
 }
 
 /*
-LbrpApiService Update port mode by ID
-Update operation of resource: port_mode
+LbrpApiService Update start-morpheus by ID
+Update operation of resource: start-morpheus
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param portMode K8s lbrp mode of operation. 'MULTI' allows to manage multiple FRONTEND port. 'SINGLE' is optimized for working with a single FRONTEND port"
+ * @param startMorpheus Set this flag if you want to start Morpheus compiler
 
 
 */
-func (a *LbrpApiService) UpdateLbrpPortModeByID(ctx context.Context, name string, portMode string) (*http.Response, error) {
+func (a *LbrpApiService) UpdateLbrpStartMorpheusByID(ctx context.Context, name string, startMorpheus bool) (*http.Response, error) {
 	var (
 		localVarHttpMethod = strings.ToUpper("Patch")
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
-	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/port_mode/"
+	localVarPath := a.client.cfg.BasePath + "/lbrp/{name}/start-morpheus/"
 	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
 
 	localVarHeaderParams := make(map[string]string)
@@ -5743,7 +6081,7 @@ func (a *LbrpApiService) UpdateLbrpPortModeByID(ctx context.Context, name string
 		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
 	}
 	// body params
-	localVarPostBody = &portMode
+	localVarPostBody = &startMorpheus
 	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
 	if err != nil {
 		return nil, err
@@ -5760,14 +6098,16 @@ func (a *LbrpApiService) UpdateLbrpPortModeByID(ctx context.Context, name string
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
 	return localVarHttpResponse, nil
 }
+
diff --git a/polycube/clients/lbrp/client.go b/polycube/clients/lbrp/client.go
index 59938e6..4a747fd 100644
--- a/polycube/clients/lbrp/client.go
+++ b/polycube/clients/lbrp/client.go
@@ -222,7 +222,7 @@ func (c *APIClient) prepareRequest(
 
 	if strings.HasPrefix(headerParams["Content-Type"], "application/x-www-form-urlencoded") && len(formParams) > 0 {
 		if body != nil {
-			return nil, errors.New("Cannot specify postBody and x-www-form-urlencoded form at the same time.")
+			return nil, errors.New("cannot specify postBody and x-www-form-urlencoded form at the same time")
 		}
 		body = &bytes.Buffer{}
 		body.WriteString(formParams.Encode())
@@ -309,23 +309,6 @@ func (c *APIClient) prepareRequest(
 	return localVarRequest, nil
 }
 
-func removeLinks(b []byte) ([]byte, error) {
-	var arr []interface{}
-	if err := json.Unmarshal(b, &arr); err != nil {
-		return nil, err
-	}
-	for i, el := range arr {
-		if reflect.TypeOf(el).Kind() == reflect.Slice {
-			last := len(arr) - 1
-			arr[i] = arr[last]
-			arr[last] = nil
-			arr = arr[:last]
-			return json.Marshal(&arr)
-		}
-	}
-	return b, nil
-}
-
 func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
 	if strings.Contains(contentType, "application/xml") {
 		if err = xml.Unmarshal(b, v); err != nil {
@@ -348,6 +331,23 @@ func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err err
 	return errors.New("undefined response type")
 }
 
+func removeLinks(b []byte) ([]byte, error) {
+	var arr []interface{}
+	if err := json.Unmarshal(b, &arr); err != nil {
+		return nil, err
+	}
+	for i, el := range arr {
+		if reflect.TypeOf(el).Kind() == reflect.Slice {
+			last := len(arr) - 1
+			arr[i] = arr[last]
+			arr[last] = nil
+			arr = arr[:last]
+			return json.Marshal(&arr)
+		}
+	}
+	return b, nil
+}
+
 // Add a file to the multipart request
 func addFile(w *multipart.Writer, fieldName, path string) error {
 	file, err := os.Open(path)
@@ -395,7 +395,7 @@ func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err e
 	}
 
 	if bodyBuf.Len() == 0 {
-		err = fmt.Errorf("Invalid body type %s\n", contentType)
+		err = fmt.Errorf("invalid body type %s", contentType)
 		return nil, err
 	}
 	return bodyBuf, nil
diff --git a/polycube/clients/lbrp/docs/Lbrp.md b/polycube/clients/lbrp/docs/Lbrp.md
index b5128bd..177d7e5 100644
--- a/polycube/clients/lbrp/docs/Lbrp.md
+++ b/polycube/clients/lbrp/docs/Lbrp.md
@@ -13,7 +13,7 @@ Name | Type | Description
 **Span** | **bool** | Defines if all traffic is sent to Linux                                                                                                         | [optional] [default to null]
 **SrcIpRewrite** | [***SrcIpRewrite**](SrcIpRewrite.md) | If configured, when a client request arrives to the LB, the source IP addrress is replaced with another IP address from the &#39;new&#39; range | [optional] [default to null]
 **Service** | [**[]Service**](Service.md) | Services (i.e., virtual ip:protocol:port) exported to the client                                                                                | [optional] [default to null]
-**PortMode_** | **string** | K8s lbrp mode of operation. 'MULTI' allows to manage multiple FRONTEND port. 'SINGLE' is optimized for working with a single FRONTEND port                                                    | [optional] [default to MULTI]
+**PortMode** | **string** | K8s lbrp mode of operation. 'MULTI' allows to manage multiple FRONTEND port. 'SINGLE' is optimized for working with a single FRONTEND port                                                    | [optional] [default to MULTI]
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/polycube/clients/lbrp/docs/Ports.md b/polycube/clients/lbrp/docs/Ports.md
index 476eb09..96debb8 100644
--- a/polycube/clients/lbrp/docs/Ports.md
+++ b/polycube/clients/lbrp/docs/Ports.md
@@ -9,7 +9,7 @@ Name | Type | Description | Notes
 **Peer** | **string** | Peer name, such as a network interfaces (e.g., &#39;veth0&#39;) or another cube (e.g., &#39;br1:port2&#39;) | [optional] [default to null]
 **Tcubes** | **[]string** |  | [optional] [default to null]
 **Type_** | **string** | Type of the LB port (e.g. FRONTEND or BACKEND) | [optional] [default to null]
-**Ip_** | **string** | IP address of the client interface (only for FRONTEND port) | [optional] [default to null]
+**Ip** | **string** | IP address of the client interface (only for FRONTEND port) | [optional] [default to null]
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/polycube/clients/lbrp/model_lbrp.go b/polycube/clients/lbrp/model_lbrp.go
index c833cea..5323e10 100644
--- a/polycube/clients/lbrp/model_lbrp.go
+++ b/polycube/clients/lbrp/model_lbrp.go
@@ -15,20 +15,24 @@ type Lbrp struct {
 	// UUID of the Cube
 	Uuid string `json:"uuid,omitempty"`
 	// Type of the Cube (TC, XDP_SKB, XDP_DRV)
-	Type_       string `json:"type,omitempty"`
+	Type_ string `json:"type,omitempty"`
 	ServiceName string `json:"service-name,omitempty"`
-	// Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
+	// Logging level of a cube, from none (OFF) to the most verbose (TRACE)
 	Loglevel string `json:"loglevel,omitempty"`
+	// Defines if the service should be automatically optimized by Morpheus
+	DynOpt bool `json:"dyn-opt,omitempty"`
+	// Set this flag if you want to start Morpheus compiler
+	StartMorpheus bool `json:"start-morpheus,omitempty"`
 	// Entry of the ports table
 	Ports []Ports `json:"ports,omitempty"`
 	// Defines if the service is visible in Linux
 	Shadow bool `json:"shadow,omitempty"`
 	// Defines if all traffic is sent to Linux
 	Span bool `json:"span,omitempty"`
-	// If configured, when a client request arrives to the LB, the source IP addrress is replaced with another IP address from the 'new' range
+	// LB mode of operation. 'SINGLE' is optimized for working with a single FRONTEND port. 'MULTI' allows to manage multiple FRONTEND port
+	PortMode string `json:"port_mode,omitempty"`
+	// If configured, when a client request arrives to the LB, the source IP address is replaced with another IP address from the 'new' range
 	SrcIpRewrite *SrcIpRewrite `json:"src-ip-rewrite,omitempty"`
 	// Services (i.e., virtual ip:protocol:port) exported to the client
 	Service []Service `json:"service,omitempty"`
-	// K8s lbrp mode of operation. 'MULTI' allows to manage multiple FRONTEND port. 'SINGLE' is optimized for working with a single FRONTEND port
-	PortMode_ string `json:"port_mode,omitempty"`
 }
diff --git a/polycube/clients/lbrp/model_ports.go b/polycube/clients/lbrp/model_ports.go
index 75dd38d..eff934d 100644
--- a/polycube/clients/lbrp/model_ports.go
+++ b/polycube/clients/lbrp/model_ports.go
@@ -17,10 +17,10 @@ type Ports struct {
 	// Status of the port (UP or DOWN)
 	Status string `json:"status,omitempty"`
 	// Peer name, such as a network interfaces (e.g., 'veth0') or another cube (e.g., 'br1:port2')
-	Peer   string   `json:"peer,omitempty"`
+	Peer string `json:"peer,omitempty"`
 	Tcubes []string `json:"tcubes,omitempty"`
 	// Type of the LB port (e.g. FRONTEND or BACKEND)
 	Type_ string `json:"type,omitempty"`
 	// IP address of the client interface (only for FRONTEND port)
-	Ip_ string `json:"ip,omitempty"`
+	Ip string `json:"ip,omitempty"`
 }
diff --git a/polycube/clients/router/README.md b/polycube/clients/router/README.md
index b622a69..f35cded 100644
--- a/polycube/clients/router/README.md
+++ b/polycube/clients/router/README.md
@@ -44,6 +44,7 @@ Class | Method | HTTP request | Description
 *RouterApi* | [**ReadRouterArpTableListByID**](docs/RouterApi.md#readrouterarptablelistbyid) | **Get** /router/{name}/arp-table/ | Read arp-table by ID
 *RouterApi* | [**ReadRouterArpTableMacByID**](docs/RouterApi.md#readrouterarptablemacbyid) | **Get** /router/{name}/arp-table/{address}/mac/ | Read mac by ID
 *RouterApi* | [**ReadRouterByID**](docs/RouterApi.md#readrouterbyid) | **Get** /router/{name}/ | Read router by ID
+*RouterApi* | [**ReadRouterDynOptByID**](docs/RouterApi.md#readrouterdynoptbyid) | **Get** /router/{name}/dyn-opt/ | Read dyn-opt by ID
 *RouterApi* | [**ReadRouterListByID**](docs/RouterApi.md#readrouterlistbyid) | **Get** /router/ | Read router by ID
 *RouterApi* | [**ReadRouterLoglevelByID**](docs/RouterApi.md#readrouterloglevelbyid) | **Get** /router/{name}/loglevel/ | Read loglevel by ID
 *RouterApi* | [**ReadRouterPortsByID**](docs/RouterApi.md#readrouterportsbyid) | **Get** /router/{name}/ports/{ports_name}/ | Read ports by ID
@@ -62,6 +63,7 @@ Class | Method | HTTP request | Description
 *RouterApi* | [**ReadRouterServiceNameByID**](docs/RouterApi.md#readrouterservicenamebyid) | **Get** /router/{name}/service-name/ | Read service-name by ID
 *RouterApi* | [**ReadRouterShadowByID**](docs/RouterApi.md#readroutershadowbyid) | **Get** /router/{name}/shadow/ | Read shadow by ID
 *RouterApi* | [**ReadRouterSpanByID**](docs/RouterApi.md#readrouterspanbyid) | **Get** /router/{name}/span/ | Read span by ID
+*RouterApi* | [**ReadRouterStartMorpheusByID**](docs/RouterApi.md#readrouterstartmorpheusbyid) | **Get** /router/{name}/start-morpheus/ | Read start-morpheus by ID
 *RouterApi* | [**ReadRouterTypeByID**](docs/RouterApi.md#readroutertypebyid) | **Get** /router/{name}/type/ | Read type by ID
 *RouterApi* | [**ReadRouterUuidByID**](docs/RouterApi.md#readrouteruuidbyid) | **Get** /router/{name}/uuid/ | Read uuid by ID
 *RouterApi* | [**ReplaceRouterArpTableByID**](docs/RouterApi.md#replacerouterarptablebyid) | **Put** /router/{name}/arp-table/{address}/ | Replace arp-table by ID
@@ -91,6 +93,7 @@ Class | Method | HTTP request | Description
 *RouterApi* | [**UpdateRouterRouteListByID**](docs/RouterApi.md#updaterouterroutelistbyid) | **Patch** /router/{name}/route/ | Update route by ID
 *RouterApi* | [**UpdateRouterRoutePathcostByID**](docs/RouterApi.md#updaterouterroutepathcostbyid) | **Patch** /router/{name}/route/{network}/{nexthop}/pathcost/ | Update pathcost by ID
 *RouterApi* | [**UpdateRouterSpanByID**](docs/RouterApi.md#updaterouterspanbyid) | **Patch** /router/{name}/span/ | Update span by ID
+*RouterApi* | [**UpdateRouterStartMorpheusByID**](docs/RouterApi.md#updaterouterstartmorpheusbyid) | **Patch** /router/{name}/start-morpheus/ | Update start-morpheus by ID
 
 
 ## Documentation For Models
diff --git a/polycube/clients/router/api_router.go b/polycube/clients/router/api_router.go
index 5b9ed6f..483dbc9 100644
--- a/polycube/clients/router/api_router.go
+++ b/polycube/clients/router/api_router.go
@@ -1,3 +1,4 @@
+
 /*
  * router API
  *
@@ -7,15 +8,15 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 import (
 	"context"
-	"fmt"
 	"io/ioutil"
 	"net/http"
 	"net/url"
 	"strings"
+	"fmt"
 )
 
 // Linger please
@@ -41,6 +42,7 @@ func (a *RouterApiService) CreateRouterArpTableByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -87,12 +89,13 @@ func (a *RouterApiService) CreateRouterArpTableByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -114,6 +117,7 @@ func (a *RouterApiService) CreateRouterArpTableListByID(ctx context.Context, nam
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -159,12 +163,13 @@ func (a *RouterApiService) CreateRouterArpTableListByID(ctx context.Context, nam
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -186,6 +191,7 @@ func (a *RouterApiService) CreateRouterByID(ctx context.Context, name string, ro
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -231,12 +237,13 @@ func (a *RouterApiService) CreateRouterByID(ctx context.Context, name string, ro
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -259,6 +266,7 @@ func (a *RouterApiService) CreateRouterPortsByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -305,12 +313,13 @@ func (a *RouterApiService) CreateRouterPortsByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -332,6 +341,7 @@ func (a *RouterApiService) CreateRouterPortsListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -377,12 +387,13 @@ func (a *RouterApiService) CreateRouterPortsListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -406,6 +417,7 @@ func (a *RouterApiService) CreateRouterPortsSecondaryipByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -453,12 +465,13 @@ func (a *RouterApiService) CreateRouterPortsSecondaryipByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -481,6 +494,7 @@ func (a *RouterApiService) CreateRouterPortsSecondaryipListByID(ctx context.Cont
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -527,12 +541,13 @@ func (a *RouterApiService) CreateRouterPortsSecondaryipListByID(ctx context.Cont
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -556,6 +571,7 @@ func (a *RouterApiService) CreateRouterRouteByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -603,12 +619,13 @@ func (a *RouterApiService) CreateRouterRouteByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -630,6 +647,7 @@ func (a *RouterApiService) CreateRouterRouteListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -675,12 +693,13 @@ func (a *RouterApiService) CreateRouterRouteListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -702,6 +721,7 @@ func (a *RouterApiService) DeleteRouterArpTableByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -746,12 +766,13 @@ func (a *RouterApiService) DeleteRouterArpTableByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -772,6 +793,7 @@ func (a *RouterApiService) DeleteRouterArpTableListByID(ctx context.Context, nam
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -815,12 +837,13 @@ func (a *RouterApiService) DeleteRouterArpTableListByID(ctx context.Context, nam
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -841,6 +864,7 @@ func (a *RouterApiService) DeleteRouterByID(ctx context.Context, name string) (*
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -884,12 +908,13 @@ func (a *RouterApiService) DeleteRouterByID(ctx context.Context, name string) (*
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -911,6 +936,7 @@ func (a *RouterApiService) DeleteRouterPortsByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -955,12 +981,13 @@ func (a *RouterApiService) DeleteRouterPortsByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -981,6 +1008,7 @@ func (a *RouterApiService) DeleteRouterPortsListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1024,12 +1052,13 @@ func (a *RouterApiService) DeleteRouterPortsListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1052,6 +1081,7 @@ func (a *RouterApiService) DeleteRouterPortsSecondaryipByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1097,12 +1127,13 @@ func (a *RouterApiService) DeleteRouterPortsSecondaryipByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1124,6 +1155,7 @@ func (a *RouterApiService) DeleteRouterPortsSecondaryipListByID(ctx context.Cont
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1168,12 +1200,13 @@ func (a *RouterApiService) DeleteRouterPortsSecondaryipListByID(ctx context.Cont
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1196,6 +1229,7 @@ func (a *RouterApiService) DeleteRouterRouteByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1241,12 +1275,13 @@ func (a *RouterApiService) DeleteRouterRouteByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1267,6 +1302,7 @@ func (a *RouterApiService) DeleteRouterRouteListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -1310,12 +1346,13 @@ func (a *RouterApiService) DeleteRouterRouteListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -1333,10 +1370,10 @@ Read operation of resource: arp-table
 */
 func (a *RouterApiService) ReadRouterArpTableByID(ctx context.Context, name string, address string) (ArpTable, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue ArpTable
 	)
 
@@ -1384,27 +1421,27 @@ func (a *RouterApiService) ReadRouterArpTableByID(ctx context.Context, name stri
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v ArpTable
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1422,10 +1459,10 @@ Read operation of resource: interface
 */
 func (a *RouterApiService) ReadRouterArpTableInterfaceByID(ctx context.Context, name string, address string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1473,27 +1510,27 @@ func (a *RouterApiService) ReadRouterArpTableInterfaceByID(ctx context.Context,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1510,10 +1547,10 @@ Read operation of resource: arp-table
 */
 func (a *RouterApiService) ReadRouterArpTableListByID(ctx context.Context, name string) ([]ArpTable, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []ArpTable
 	)
 
@@ -1560,27 +1597,27 @@ func (a *RouterApiService) ReadRouterArpTableListByID(ctx context.Context, name
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []ArpTable
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1598,10 +1635,10 @@ Read operation of resource: mac
 */
 func (a *RouterApiService) ReadRouterArpTableMacByID(ctx context.Context, name string, address string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1649,27 +1686,27 @@ func (a *RouterApiService) ReadRouterArpTableMacByID(ctx context.Context, name s
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1686,10 +1723,10 @@ Read operation of resource: router
 */
 func (a *RouterApiService) ReadRouterByID(ctx context.Context, name string) (Router, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Router
 	)
 
@@ -1736,27 +1773,114 @@ func (a *RouterApiService) ReadRouterByID(ctx context.Context, name string) (Rou
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Router
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
 
+	return localVarReturnValue, localVarHttpResponse, nil
+}
+
+/*
+RouterApiService Read dyn-opt by ID
+Read operation of resource: dyn-opt
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return bool
+*/
+func (a *RouterApiService) ReadRouterDynOptByID(ctx context.Context, name string) (bool, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/router/{name}/dyn-opt/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1772,10 +1896,10 @@ Read operation of resource: router
 */
 func (a *RouterApiService) ReadRouterListByID(ctx context.Context) ([]Router, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Router
 	)
 
@@ -1821,27 +1945,27 @@ func (a *RouterApiService) ReadRouterListByID(ctx context.Context) ([]Router, *h
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Router
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1858,10 +1982,10 @@ Read operation of resource: loglevel
 */
 func (a *RouterApiService) ReadRouterLoglevelByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -1908,27 +2032,27 @@ func (a *RouterApiService) ReadRouterLoglevelByID(ctx context.Context, name stri
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -1946,10 +2070,10 @@ Read operation of resource: ports
 */
 func (a *RouterApiService) ReadRouterPortsByID(ctx context.Context, name string, portsName string) (Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Ports
 	)
 
@@ -1997,27 +2121,27 @@ func (a *RouterApiService) ReadRouterPortsByID(ctx context.Context, name string,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2035,10 +2159,10 @@ Read operation of resource: ip
 */
 func (a *RouterApiService) ReadRouterPortsIpByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2086,27 +2210,27 @@ func (a *RouterApiService) ReadRouterPortsIpByID(ctx context.Context, name strin
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2123,10 +2247,10 @@ Read operation of resource: ports
 */
 func (a *RouterApiService) ReadRouterPortsListByID(ctx context.Context, name string) ([]Ports, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Ports
 	)
 
@@ -2173,27 +2297,27 @@ func (a *RouterApiService) ReadRouterPortsListByID(ctx context.Context, name str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Ports
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2211,10 +2335,10 @@ Read operation of resource: mac
 */
 func (a *RouterApiService) ReadRouterPortsMacByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2262,27 +2386,27 @@ func (a *RouterApiService) ReadRouterPortsMacByID(ctx context.Context, name stri
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2300,10 +2424,10 @@ Read operation of resource: peer
 */
 func (a *RouterApiService) ReadRouterPortsPeerByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2351,27 +2475,27 @@ func (a *RouterApiService) ReadRouterPortsPeerByID(ctx context.Context, name str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2390,10 +2514,10 @@ Read operation of resource: secondaryip
 */
 func (a *RouterApiService) ReadRouterPortsSecondaryipByID(ctx context.Context, name string, portsName string, ip string) (PortsSecondaryip, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue PortsSecondaryip
 	)
 
@@ -2442,27 +2566,27 @@ func (a *RouterApiService) ReadRouterPortsSecondaryipByID(ctx context.Context, n
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v PortsSecondaryip
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2480,10 +2604,10 @@ Read operation of resource: secondaryip
 */
 func (a *RouterApiService) ReadRouterPortsSecondaryipListByID(ctx context.Context, name string, portsName string) ([]PortsSecondaryip, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []PortsSecondaryip
 	)
 
@@ -2531,27 +2655,27 @@ func (a *RouterApiService) ReadRouterPortsSecondaryipListByID(ctx context.Contex
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []PortsSecondaryip
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2569,10 +2693,10 @@ Read operation of resource: status
 */
 func (a *RouterApiService) ReadRouterPortsStatusByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2620,27 +2744,27 @@ func (a *RouterApiService) ReadRouterPortsStatusByID(ctx context.Context, name s
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2658,10 +2782,10 @@ Read operation of resource: uuid
 */
 func (a *RouterApiService) ReadRouterPortsUuidByID(ctx context.Context, name string, portsName string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2709,27 +2833,27 @@ func (a *RouterApiService) ReadRouterPortsUuidByID(ctx context.Context, name str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2748,10 +2872,10 @@ Read operation of resource: route
 */
 func (a *RouterApiService) ReadRouterRouteByID(ctx context.Context, name string, network string, nexthop string) (Route, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue Route
 	)
 
@@ -2800,27 +2924,27 @@ func (a *RouterApiService) ReadRouterRouteByID(ctx context.Context, name string,
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v Route
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2839,10 +2963,10 @@ Read operation of resource: interface
 */
 func (a *RouterApiService) ReadRouterRouteInterfaceByID(ctx context.Context, name string, network string, nexthop string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -2891,27 +3015,27 @@ func (a *RouterApiService) ReadRouterRouteInterfaceByID(ctx context.Context, nam
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -2928,10 +3052,10 @@ Read operation of resource: route
 */
 func (a *RouterApiService) ReadRouterRouteListByID(ctx context.Context, name string) ([]Route, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue []Route
 	)
 
@@ -2978,27 +3102,27 @@ func (a *RouterApiService) ReadRouterRouteListByID(ctx context.Context, name str
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v []Route
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3017,10 +3141,10 @@ Read operation of resource: pathcost
 */
 func (a *RouterApiService) ReadRouterRoutePathcostByID(ctx context.Context, name string, network string, nexthop string) (int32, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue int32
 	)
 
@@ -3069,27 +3193,27 @@ func (a *RouterApiService) ReadRouterRoutePathcostByID(ctx context.Context, name
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v int32
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3106,10 +3230,10 @@ Read operation of resource: service-name
 */
 func (a *RouterApiService) ReadRouterServiceNameByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3156,27 +3280,27 @@ func (a *RouterApiService) ReadRouterServiceNameByID(ctx context.Context, name s
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3193,10 +3317,10 @@ Read operation of resource: shadow
 */
 func (a *RouterApiService) ReadRouterShadowByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -3243,27 +3367,27 @@ func (a *RouterApiService) ReadRouterShadowByID(ctx context.Context, name string
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3280,10 +3404,10 @@ Read operation of resource: span
 */
 func (a *RouterApiService) ReadRouterSpanByID(ctx context.Context, name string) (bool, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue bool
 	)
 
@@ -3330,27 +3454,114 @@ func (a *RouterApiService) ReadRouterSpanByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v bool
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
+		
+		return localVarReturnValue, localVarHttpResponse, newErr
+	}
+
+	return localVarReturnValue, localVarHttpResponse, nil
+}
+
+/*
+RouterApiService Read start-morpheus by ID
+Read operation of resource: start-morpheus
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+
+@return bool
+*/
+func (a *RouterApiService) ReadRouterStartMorpheusByID(ctx context.Context, name string) (bool, *http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		localVarReturnValue bool
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/router/{name}/start-morpheus/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return localVarReturnValue, nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
 
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode < 300 {
+		// If we succeed, return the data, otherwise pass on to decode error.
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+		return localVarReturnValue, localVarHttpResponse, err
+	}
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
+		if localVarHttpResponse.StatusCode == 200 {
+			var v bool
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
+				return localVarReturnValue, localVarHttpResponse, newErr
+		}
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3367,10 +3578,10 @@ Read operation of resource: type
 */
 func (a *RouterApiService) ReadRouterTypeByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3417,27 +3628,27 @@ func (a *RouterApiService) ReadRouterTypeByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3454,10 +3665,10 @@ Read operation of resource: uuid
 */
 func (a *RouterApiService) ReadRouterUuidByID(ctx context.Context, name string) (string, *http.Response, error) {
 	var (
-		localVarHttpMethod  = strings.ToUpper("Get")
-		localVarPostBody    interface{}
-		localVarFileName    string
-		localVarFileBytes   []byte
+		localVarHttpMethod = strings.ToUpper("Get")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
 		localVarReturnValue string
 	)
 
@@ -3504,27 +3715,27 @@ func (a *RouterApiService) ReadRouterUuidByID(ctx context.Context, name string)
 
 	if localVarHttpResponse.StatusCode < 300 {
 		// If we succeed, return the data, otherwise pass on to decode error.
-		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
+		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
 		return localVarReturnValue, localVarHttpResponse, err
 	}
 
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		if localVarHttpResponse.StatusCode == 200 {
 			var v string
-			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
-			if err != nil {
-				newErr.error = err.Error()
+			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
+				if err != nil {
+					newErr.error = err.Error()
+					return localVarReturnValue, localVarHttpResponse, newErr
+				}
+				newErr.model = v
 				return localVarReturnValue, localVarHttpResponse, newErr
-			}
-			newErr.model = v
-			return localVarReturnValue, localVarHttpResponse, newErr
 		}
-
+		
 		return localVarReturnValue, localVarHttpResponse, newErr
 	}
 
@@ -3547,6 +3758,7 @@ func (a *RouterApiService) ReplaceRouterArpTableByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3593,12 +3805,13 @@ func (a *RouterApiService) ReplaceRouterArpTableByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3620,6 +3833,7 @@ func (a *RouterApiService) ReplaceRouterArpTableListByID(ctx context.Context, na
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3665,12 +3879,13 @@ func (a *RouterApiService) ReplaceRouterArpTableListByID(ctx context.Context, na
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3692,6 +3907,7 @@ func (a *RouterApiService) ReplaceRouterByID(ctx context.Context, name string, r
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3737,12 +3953,13 @@ func (a *RouterApiService) ReplaceRouterByID(ctx context.Context, name string, r
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3765,6 +3982,7 @@ func (a *RouterApiService) ReplaceRouterPortsByID(ctx context.Context, name stri
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3811,12 +4029,13 @@ func (a *RouterApiService) ReplaceRouterPortsByID(ctx context.Context, name stri
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3838,6 +4057,7 @@ func (a *RouterApiService) ReplaceRouterPortsListByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3883,12 +4103,13 @@ func (a *RouterApiService) ReplaceRouterPortsListByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3912,6 +4133,7 @@ func (a *RouterApiService) ReplaceRouterPortsSecondaryipByID(ctx context.Context
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -3959,12 +4181,13 @@ func (a *RouterApiService) ReplaceRouterPortsSecondaryipByID(ctx context.Context
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -3987,6 +4210,7 @@ func (a *RouterApiService) ReplaceRouterPortsSecondaryipListByID(ctx context.Con
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4033,12 +4257,13 @@ func (a *RouterApiService) ReplaceRouterPortsSecondaryipListByID(ctx context.Con
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4062,6 +4287,7 @@ func (a *RouterApiService) ReplaceRouterRouteByID(ctx context.Context, name stri
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4109,12 +4335,13 @@ func (a *RouterApiService) ReplaceRouterRouteByID(ctx context.Context, name stri
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4136,6 +4363,7 @@ func (a *RouterApiService) ReplaceRouterRouteListByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4181,12 +4409,13 @@ func (a *RouterApiService) ReplaceRouterRouteListByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4209,6 +4438,7 @@ func (a *RouterApiService) UpdateRouterArpTableByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4255,12 +4485,13 @@ func (a *RouterApiService) UpdateRouterArpTableByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4283,6 +4514,7 @@ func (a *RouterApiService) UpdateRouterArpTableInterfaceByID(ctx context.Context
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4329,12 +4561,13 @@ func (a *RouterApiService) UpdateRouterArpTableInterfaceByID(ctx context.Context
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4356,6 +4589,7 @@ func (a *RouterApiService) UpdateRouterArpTableListByID(ctx context.Context, nam
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4401,12 +4635,13 @@ func (a *RouterApiService) UpdateRouterArpTableListByID(ctx context.Context, nam
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4429,6 +4664,7 @@ func (a *RouterApiService) UpdateRouterArpTableMacByID(ctx context.Context, name
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4475,12 +4711,13 @@ func (a *RouterApiService) UpdateRouterArpTableMacByID(ctx context.Context, name
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4502,6 +4739,7 @@ func (a *RouterApiService) UpdateRouterByID(ctx context.Context, name string, ro
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4547,12 +4785,13 @@ func (a *RouterApiService) UpdateRouterByID(ctx context.Context, name string, ro
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4573,6 +4812,7 @@ func (a *RouterApiService) UpdateRouterListByID(ctx context.Context, router []Ro
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4617,12 +4857,13 @@ func (a *RouterApiService) UpdateRouterListByID(ctx context.Context, router []Ro
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4634,7 +4875,7 @@ RouterApiService Update loglevel by ID
 Update operation of resource: loglevel
  * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  * @param name ID of name
- * @param loglevel Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
+ * @param loglevel Logging level of a cube, from none (OFF) to the most verbose (TRACE)
 
 
 */
@@ -4644,6 +4885,7 @@ func (a *RouterApiService) UpdateRouterLoglevelByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4689,12 +4931,13 @@ func (a *RouterApiService) UpdateRouterLoglevelByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4717,6 +4960,7 @@ func (a *RouterApiService) UpdateRouterPortsByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4763,12 +5007,13 @@ func (a *RouterApiService) UpdateRouterPortsByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4791,6 +5036,7 @@ func (a *RouterApiService) UpdateRouterPortsIpByID(ctx context.Context, name str
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4837,12 +5083,13 @@ func (a *RouterApiService) UpdateRouterPortsIpByID(ctx context.Context, name str
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4864,6 +5111,7 @@ func (a *RouterApiService) UpdateRouterPortsListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4909,12 +5157,13 @@ func (a *RouterApiService) UpdateRouterPortsListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -4937,6 +5186,7 @@ func (a *RouterApiService) UpdateRouterPortsMacByID(ctx context.Context, name st
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -4983,12 +5233,13 @@ func (a *RouterApiService) UpdateRouterPortsMacByID(ctx context.Context, name st
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5011,6 +5262,7 @@ func (a *RouterApiService) UpdateRouterPortsPeerByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5057,12 +5309,13 @@ func (a *RouterApiService) UpdateRouterPortsPeerByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5086,6 +5339,7 @@ func (a *RouterApiService) UpdateRouterPortsSecondaryipByID(ctx context.Context,
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5133,12 +5387,13 @@ func (a *RouterApiService) UpdateRouterPortsSecondaryipByID(ctx context.Context,
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5161,6 +5416,7 @@ func (a *RouterApiService) UpdateRouterPortsSecondaryipListByID(ctx context.Cont
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5207,12 +5463,13 @@ func (a *RouterApiService) UpdateRouterPortsSecondaryipListByID(ctx context.Cont
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5236,6 +5493,7 @@ func (a *RouterApiService) UpdateRouterRouteByID(ctx context.Context, name strin
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5283,12 +5541,13 @@ func (a *RouterApiService) UpdateRouterRouteByID(ctx context.Context, name strin
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5310,6 +5569,7 @@ func (a *RouterApiService) UpdateRouterRouteListByID(ctx context.Context, name s
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5355,12 +5615,13 @@ func (a *RouterApiService) UpdateRouterRouteListByID(ctx context.Context, name s
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5384,6 +5645,7 @@ func (a *RouterApiService) UpdateRouterRoutePathcostByID(ctx context.Context, na
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5431,12 +5693,13 @@ func (a *RouterApiService) UpdateRouterRoutePathcostByID(ctx context.Context, na
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
-
+		
 		return localVarHttpResponse, newErr
 	}
 
@@ -5458,6 +5721,7 @@ func (a *RouterApiService) UpdateRouterSpanByID(ctx context.Context, name string
 		localVarPostBody   interface{}
 		localVarFileName   string
 		localVarFileBytes  []byte
+		
 	)
 
 	// create path and map variables
@@ -5503,14 +5767,90 @@ func (a *RouterApiService) UpdateRouterSpanByID(ctx context.Context, name string
 		return localVarHttpResponse, err
 	}
 
+
 	if localVarHttpResponse.StatusCode >= 300 {
 		newErr := GenericSwaggerError{
-			body:  localVarBody,
+			body: localVarBody,
 			error: localVarHttpResponse.Status,
 		}
+		
+		return localVarHttpResponse, newErr
+	}
 
+	return localVarHttpResponse, nil
+}
+
+/*
+RouterApiService Update start-morpheus by ID
+Update operation of resource: start-morpheus
+ * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
+ * @param name ID of name
+ * @param startMorpheus Set this flag if you want to start Morpheus compiler
+
+
+*/
+func (a *RouterApiService) UpdateRouterStartMorpheusByID(ctx context.Context, name string, startMorpheus bool) (*http.Response, error) {
+	var (
+		localVarHttpMethod = strings.ToUpper("Patch")
+		localVarPostBody   interface{}
+		localVarFileName   string
+		localVarFileBytes  []byte
+		
+	)
+
+	// create path and map variables
+	localVarPath := a.client.cfg.BasePath + "/router/{name}/start-morpheus/"
+	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", fmt.Sprintf("%v", name), -1)
+
+	localVarHeaderParams := make(map[string]string)
+	localVarQueryParams := url.Values{}
+	localVarFormParams := url.Values{}
+
+	// to determine the Content-Type header
+	localVarHttpContentTypes := []string{"application/json"}
+
+	// set Content-Type header
+	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
+	if localVarHttpContentType != "" {
+		localVarHeaderParams["Content-Type"] = localVarHttpContentType
+	}
+
+	// to determine the Accept header
+	localVarHttpHeaderAccepts := []string{"application/json"}
+
+	// set Accept header
+	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
+	if localVarHttpHeaderAccept != "" {
+		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
+	}
+	// body params
+	localVarPostBody = &startMorpheus
+	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
+	if err != nil {
+		return nil, err
+	}
+
+	localVarHttpResponse, err := a.client.callAPI(r)
+	if err != nil || localVarHttpResponse == nil {
+		return localVarHttpResponse, err
+	}
+
+	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
+	localVarHttpResponse.Body.Close()
+	if err != nil {
+		return localVarHttpResponse, err
+	}
+
+
+	if localVarHttpResponse.StatusCode >= 300 {
+		newErr := GenericSwaggerError{
+			body: localVarBody,
+			error: localVarHttpResponse.Status,
+		}
+		
 		return localVarHttpResponse, newErr
 	}
 
 	return localVarHttpResponse, nil
 }
+
diff --git a/polycube/clients/router/client.go b/polycube/clients/router/client.go
index ed39a54..81ba26c 100644
--- a/polycube/clients/router/client.go
+++ b/polycube/clients/router/client.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 import (
 	"bytes"
@@ -309,23 +309,6 @@ func (c *APIClient) prepareRequest(
 	return localVarRequest, nil
 }
 
-func removeLinks(b []byte) ([]byte, error) {
-	var arr []interface{}
-	if err := json.Unmarshal(b, &arr); err != nil {
-		return nil, err
-	}
-	for i, el := range arr {
-		if reflect.TypeOf(el).Kind() == reflect.Slice {
-			last := len(arr) - 1
-			arr[i] = arr[last]
-			arr[last] = nil
-			arr = arr[:last]
-			return json.Marshal(&arr)
-		}
-	}
-	return b, nil
-}
-
 func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err error) {
 	if strings.Contains(contentType, "application/xml") {
 		if err = xml.Unmarshal(b, v); err != nil {
@@ -348,6 +331,23 @@ func (c *APIClient) decode(v interface{}, b []byte, contentType string) (err err
 	return errors.New("undefined response type")
 }
 
+func removeLinks(b []byte) ([]byte, error) {
+	var arr []interface{}
+	if err := json.Unmarshal(b, &arr); err != nil {
+		return nil, err
+	}
+	for i, el := range arr {
+		if reflect.TypeOf(el).Kind() == reflect.Slice {
+			last := len(arr) - 1
+			arr[i] = arr[last]
+			arr[last] = nil
+			arr = arr[:last]
+			return json.Marshal(&arr)
+		}
+	}
+	return b, nil
+}
+
 // Add a file to the multipart request
 func addFile(w *multipart.Writer, fieldName, path string) error {
 	file, err := os.Open(path)
diff --git a/polycube/clients/router/configuration.go b/polycube/clients/router/configuration.go
index 1b68eb9..2125fad 100644
--- a/polycube/clients/router/configuration.go
+++ b/polycube/clients/router/configuration.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 import (
 	"net/http"
diff --git a/polycube/clients/router/model_arp_table.go b/polycube/clients/router/model_arp_table.go
index 50209df..e4de170 100644
--- a/polycube/clients/router/model_arp_table.go
+++ b/polycube/clients/router/model_arp_table.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 type ArpTable struct {
 	// Destination IP address
diff --git a/polycube/clients/router/model_ports.go b/polycube/clients/router/model_ports.go
index bb78e62..b466bde 100644
--- a/polycube/clients/router/model_ports.go
+++ b/polycube/clients/router/model_ports.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 type Ports struct {
 	// Port Name
@@ -17,7 +17,7 @@ type Ports struct {
 	// Status of the port (UP or DOWN)
 	Status string `json:"status,omitempty"`
 	// Peer name, such as a network interfaces (e.g., 'veth0') or another cube (e.g., 'br1:port2')
-	Peer   string   `json:"peer,omitempty"`
+	Peer string `json:"peer,omitempty"`
 	Tcubes []string `json:"tcubes,omitempty"`
 	// IP address and prefix of the port
 	Ip string `json:"ip,omitempty"`
diff --git a/polycube/clients/router/model_ports_secondaryip.go b/polycube/clients/router/model_ports_secondaryip.go
index 6767551..b434b6c 100644
--- a/polycube/clients/router/model_ports_secondaryip.go
+++ b/polycube/clients/router/model_ports_secondaryip.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 type PortsSecondaryip struct {
 	// Secondary IP address and prefix of the port
diff --git a/polycube/clients/router/model_route.go b/polycube/clients/router/model_route.go
index 26a7233..ec18203 100644
--- a/polycube/clients/router/model_route.go
+++ b/polycube/clients/router/model_route.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 type Route struct {
 	// Destination network IP
diff --git a/polycube/clients/router/model_router.go b/polycube/clients/router/model_router.go
index db18ffc..dd166d7 100644
--- a/polycube/clients/router/model_router.go
+++ b/polycube/clients/router/model_router.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 type Router struct {
 	// Name of the router service
@@ -15,10 +15,14 @@ type Router struct {
 	// UUID of the Cube
 	Uuid string `json:"uuid,omitempty"`
 	// Type of the Cube (TC, XDP_SKB, XDP_DRV)
-	Type_       string `json:"type,omitempty"`
+	Type_ string `json:"type,omitempty"`
 	ServiceName string `json:"service-name,omitempty"`
-	// Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE)
+	// Logging level of a cube, from none (OFF) to the most verbose (TRACE)
 	Loglevel string `json:"loglevel,omitempty"`
+	// Defines if the service should be automatically optimized by Morpheus
+	DynOpt bool `json:"dyn-opt,omitempty"`
+	// Set this flag if you want to start Morpheus compiler
+	StartMorpheus bool `json:"start-morpheus,omitempty"`
 	// Entry of the ports table
 	Ports []Ports `json:"ports,omitempty"`
 	// Defines if the service is visible in Linux
diff --git a/polycube/clients/router/response.go b/polycube/clients/router/response.go
index aaacd49..73b80b4 100644
--- a/polycube/clients/router/response.go
+++ b/polycube/clients/router/response.go
@@ -7,7 +7,7 @@
  * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
  */
 
-package router
+package swagger
 
 import (
 	"net/http"
diff --git a/polycube/lbrp.go b/polycube/lbrp.go
index 2e8d79e..1ec1c25 100644
--- a/polycube/lbrp.go
+++ b/polycube/lbrp.go
@@ -21,13 +21,14 @@ import (
 	"encoding/hex"
 	"errors"
 	"fmt"
+	"net"
+	"strings"
+
 	"github.com/polycube-network/polykube/node"
 	lbrp "github.com/polycube-network/polykube/polycube/clients/lbrp"
 	"github.com/polycube-network/polykube/types"
 	"github.com/polycube-network/polykube/utils"
 	corev1 "k8s.io/api/core/v1"
-	"net"
-	"strings"
 )
 
 func createLbrpPorts(lbName string, ports []lbrp.Ports) error {
@@ -60,7 +61,7 @@ func getIntLbrpFrontendPortsMap() (map[string]*lbrp.Ports, error) {
 		if port.Type_ == "backend" {
 			continue
 		}
-		portIp := net.ParseIP(port.Ip_)
+		portIp := net.ParseIP(port.Ip)
 		if portIp == nil {
 			l.Error(
 				err, "failed to parse internal lbrp frontend port IP",
@@ -115,7 +116,7 @@ func EnsureIntLbrpMissingFrontendPorts(pods []corev1.Pod) error {
 			portsToAdd = append(portsToAdd, lbrp.Ports{
 				Name:  portId,
 				Type_: "frontend",
-				Ip_:   podIP.String(),
+				Ip:    podIP.String(),
 				Peer:  utils.GetHostIfaceName("eth0", portId), // TODO how to return eth0 from api-server?
 			})
 		}
diff --git a/polycube/polycube.go b/polycube/polycube.go
index 8b42d05..12554e4 100644
--- a/polycube/polycube.go
+++ b/polycube/polycube.go
@@ -20,16 +20,17 @@ import (
 	"context"
 	"errors"
 	"fmt"
+	"math"
+	"net"
+	"net/http"
+	"time"
+
 	"github.com/polycube-network/polykube/node"
 	k8sdispatcher "github.com/polycube-network/polykube/polycube/clients/k8sdispatcher"
 	lbrp "github.com/polycube-network/polykube/polycube/clients/lbrp"
-	"github.com/polycube-network/polykube/polycube/clients/router"
+	router "github.com/polycube-network/polykube/polycube/clients/router"
 	"github.com/polycube-network/polykube/utils"
-	"math"
-	"net"
-	"net/http"
 	ctrl "sigs.k8s.io/controller-runtime"
-	"time"
 )
 
 const (
@@ -73,10 +74,12 @@ func createIntLbrp() error {
 	}
 	ilbPorts := []lbrp.Ports{ilbToRPort}
 	ilb := lbrp.Lbrp{
-		Name:      ilbName,
-		Loglevel:  conf.cubesLogLevel,
-		Ports:     ilbPorts,
-		PortMode_: "MULTI",
+		Name:          ilbName,
+		Loglevel:      conf.cubesLogLevel,
+		Ports:         ilbPorts,
+		PortMode:      "MULTI",
+		DynOpt:        conf.enableMorpheusDynamicOpt,
+		StartMorpheus: false,
 	}
 
 	// creating internal lbrp
@@ -146,36 +149,65 @@ func createRouter() error {
 		Mask: net.IPMask{255, 255, 255, 255}, //  /32 for allowing communication only with processes listening on the node physical interface
 	}
 
-	routes := []router.Route{
-		{ // default route through node gateway
+	routes := []router.Route{}
+
+	if !node.Env.IsDefaultGwDifferentThenExtIface {
+		routes = append(routes, router.Route{
 			Network:    "0.0.0.0/0",
 			Nexthop:    nodeGwIPStr,
 			Interface_: conf.rToElbPortName,
-		},
-		{ // traffic for vpod address must go towards the k8sdispatcher
-			Network:    node.Conf.VPodIPNet.String(),
-			Nexthop:    nodeGwIPStr,
-			Interface_: conf.rToElbPortName,
-		},
-		{ // traffic for node physical interface address must go towards the veth host end
-			Network:    nodeIPNet.String(),
-			Nexthop:    node.Conf.PolykubeVeth.Host.IPNet.IP.String(),
-			Interface_: conf.rToHostPortName,
-		},
-	}
-	arptable := []router.ArpTable{
-		{
-			Address:    nodeGwIPStr,
-			Mac:        nodeGwMACStr,
-			Interface_: conf.rToElbPortName,
-		},
+		})
+	} else {
+		nodeGwIPStr = node.Conf.ExtIface.IPNet.IP.String()
+		nodeGwMACStr = node.Conf.ExtIface.Link.Attrs().HardwareAddr.String()
+	}
+	routes = append(routes, router.Route{
+		// traffic for vpod address must go towards the k8sdispatcher
+		Network:    node.Conf.VPodIPNet.String(),
+		Nexthop:    nodeGwIPStr,
+		Interface_: conf.rToElbPortName,
+	})
+	routes = append(routes, router.Route{
+		// traffic for node physical interface address must go towards the veth host end
+		Network:    nodeIPNet.String(),
+		Nexthop:    node.Conf.PolykubeVeth.Host.IPNet.IP.String(),
+		Interface_: conf.rToHostPortName,
+	})
+	// routes := []router.Route{
+	// 	{ // default route through node gateway
+	// 		Network:    "0.0.0.0/0",
+	// 		Nexthop:    nodeGwIPStr,
+	// 		Interface_: conf.rToElbPortName,
+	// 	},
+	// 	{ // traffic for vpod address must go towards the k8sdispatcher
+	// 		Network:    node.Conf.VPodIPNet.String(),
+	// 		Nexthop:    nodeGwIPStr,
+	// 		Interface_: conf.rToElbPortName,
+	// 	},
+	// 	{ // traffic for node physical interface address must go towards the veth host end
+	// 		Network:    nodeIPNet.String(),
+	// 		Nexthop:    node.Conf.PolykubeVeth.Host.IPNet.IP.String(),
+	// 		Interface_: conf.rToHostPortName,
+	// 	},
+	// }
+	arptable := []router.ArpTable{}
+	if !node.Env.IsDefaultGwDifferentThenExtIface {
+		arptable = []router.ArpTable{
+			{
+				Address:    nodeGwIPStr,
+				Mac:        nodeGwMACStr,
+				Interface_: conf.rToElbPortName,
+			},
+		}
 	}
 	r := router.Router{
-		Name:     rName,
-		Ports:    rPorts,
-		Loglevel: conf.cubesLogLevel,
-		Route:    routes,
-		ArpTable: arptable,
+		Name:          rName,
+		Ports:         rPorts,
+		Loglevel:      conf.cubesLogLevel,
+		Route:         routes,
+		ArpTable:      arptable,
+		DynOpt:        conf.enableMorpheusDynamicOpt,
+		StartMorpheus: false,
 	}
 
 	// creating router
@@ -207,10 +239,12 @@ func createExtLbrp() error {
 
 	elbPorts := []lbrp.Ports{elbToRPort, elbToKPort}
 	elb := lbrp.Lbrp{
-		Name:      elbName,
-		Loglevel:  conf.cubesLogLevel,
-		Ports:     elbPorts,
-		PortMode_: "SINGLE",
+		Name:          elbName,
+		Loglevel:      conf.cubesLogLevel,
+		Ports:         elbPorts,
+		PortMode:      "SINGLE",
+		DynOpt:        conf.enableMorpheusDynamicOpt,
+		StartMorpheus: false,
 	}
 
 	// creating external lbrp
@@ -251,6 +285,8 @@ func createK8sDispatcher() error {
 		Ports:         kPorts,
 		InternalSrcIp: node.Conf.VPodIPNet.IP.String(),
 		NodeportRange: node.Env.NodePortRange,
+		DynOpt:        conf.enableMorpheusDynamicOpt,
+		StartMorpheus: false,
 	}
 
 	// creating k8s dispatcher
@@ -541,19 +577,20 @@ func EnsureConnection() error {
 func InitConf() {
 	ec := node.Env
 	conf = &configuration{
-		cubesLogLevel:    ec.CubesLogLevel,
-		intLbrpName:      ec.IntLbrpName,
-		rName:            ec.RouterName,
-		extLbrpName:      ec.ExtLbrpName,
-		k8sDispName:      ec.K8sDispName,
-		ilbToRPortName:   "to_" + ec.RouterName,
-		rToIlbPortName:   "to_" + ec.IntLbrpName,
-		rToVxlanPortName: "to_" + ec.VxlanIfaceName,
-		rToHostPortName:  "to_host",
-		rToElbPortName:   "to_" + ec.ExtLbrpName,
-		elbToRPortName:   "to_" + ec.RouterName,
-		elbToKPortName:   "to_" + ec.K8sDispName,
-		kToElbPortName:   "to_" + ec.ExtLbrpName,
-		kToIntPortName:   "to_int",
+		cubesLogLevel:            ec.CubesLogLevel,
+		intLbrpName:              ec.IntLbrpName,
+		rName:                    ec.RouterName,
+		extLbrpName:              ec.ExtLbrpName,
+		k8sDispName:              ec.K8sDispName,
+		ilbToRPortName:           "to_" + ec.RouterName,
+		rToIlbPortName:           "to_" + ec.IntLbrpName,
+		rToVxlanPortName:         "to_" + ec.VxlanIfaceName,
+		rToHostPortName:          "to_host",
+		rToElbPortName:           "to_" + ec.ExtLbrpName,
+		elbToRPortName:           "to_" + ec.RouterName,
+		elbToKPortName:           "to_" + ec.K8sDispName,
+		kToElbPortName:           "to_" + ec.ExtLbrpName,
+		kToIntPortName:           "to_int",
+		enableMorpheusDynamicOpt: ec.EnableMorpheusDynamicOpts,
 	}
 }
diff --git a/polycube/router.go b/polycube/router.go
index 3357e5d..f40ff7b 100644
--- a/polycube/router.go
+++ b/polycube/router.go
@@ -20,9 +20,10 @@ import (
 	"context"
 	"errors"
 	"fmt"
-	"github.com/polycube-network/polykube/polycube/clients/router"
 	"net"
 	"net/url"
+
+	router "github.com/polycube-network/polykube/polycube/clients/router"
 )
 
 // SetRouterToIntLbrpPortMAC set the MAC of the polycube router interface representing the default gateway for
diff --git a/polycube/types.go b/polycube/types.go
index a2d1df7..4cccbef 100644
--- a/polycube/types.go
+++ b/polycube/types.go
@@ -17,18 +17,19 @@ limitations under the License.
 package polycube
 
 type configuration struct {
-	cubesLogLevel    string
-	intLbrpName      string
-	rName            string
-	extLbrpName      string
-	k8sDispName      string
-	ilbToRPortName   string
-	rToIlbPortName   string
-	rToVxlanPortName string
-	rToHostPortName  string
-	rToElbPortName   string
-	elbToRPortName   string
-	elbToKPortName   string
-	kToElbPortName   string
-	kToIntPortName   string
+	cubesLogLevel            string
+	intLbrpName              string
+	rName                    string
+	extLbrpName              string
+	k8sDispName              string
+	ilbToRPortName           string
+	rToIlbPortName           string
+	rToVxlanPortName         string
+	rToHostPortName          string
+	rToElbPortName           string
+	elbToRPortName           string
+	elbToKPortName           string
+	kToElbPortName           string
+	kToIntPortName           string
+	enableMorpheusDynamicOpt bool
 }
