/**
* lbrp API generated from lbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* LbrpBase.h
*
*
*/

#pragma once

#include "../serializer/LbrpJsonObject.h"

#include "../Ports.h"
#include "../Service.h"
#include "../SrcIpRewrite.h"

#include "polycube/services/cube.h"
#include "polycube/services/port.h"



#include "polycube/services/utils.h"
#include "polycube/services/fifo_map.hpp"

#include <spdlog/spdlog.h>

using namespace polycube::service::model;


class LbrpBase: public virtual polycube::service::Cube<Ports> {
 public:
  LbrpBase(const std::string name);
  
  virtual ~LbrpBase();
  virtual void update(const LbrpJsonObject &conf);
  virtual LbrpJsonObject toJsonObject();

  /// <summary>
  /// Defines if the service should be automatically optimized by Morpheus
  /// </summary>
  virtual bool getDynOpt() = 0;

  /// <summary>
  /// Set this flag if you want to start Morpheus compiler
  /// </summary>
  virtual bool getStartMorpheus() = 0;
  virtual void setStartMorpheus(const bool &value) = 0;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  virtual std::shared_ptr<Ports> getPorts(const std::string &name);
  virtual std::vector<std::shared_ptr<Ports>> getPortsList();
  virtual void addPorts(const std::string &name, const PortsJsonObject &conf);
  virtual void addPortsList(const std::vector<PortsJsonObject> &conf);
  virtual void replacePorts(const std::string &name, const PortsJsonObject &conf);
  virtual void delPorts(const std::string &name);
  virtual void delPortsList();

  /// <summary>
  /// LB mode of operation. &#39;SINGLE&#39; is optimized for working with a single FRONTEND port. &#39;MULTI&#39; allows to manage multiple FRONTEND port
  /// </summary>
  virtual LbrpPortModeEnum getPortMode() = 0;
  virtual void setPortMode(const LbrpPortModeEnum &value) = 0;

  /// <summary>
  /// If configured, when a client request arrives to the LB, the source IP address is replaced with another IP address from the &#39;new&#39; range
  /// </summary>
  virtual std::shared_ptr<SrcIpRewrite> getSrcIpRewrite() = 0;
  virtual void addSrcIpRewrite(const SrcIpRewriteJsonObject &value) = 0;
  virtual void replaceSrcIpRewrite(const SrcIpRewriteJsonObject &conf);
  virtual void delSrcIpRewrite() = 0;

  /// <summary>
  /// Services (i.e., virtual ip:protocol:port) exported to the client
  /// </summary>
  virtual std::shared_ptr<Service> getService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) = 0;
  virtual std::vector<std::shared_ptr<Service>> getServiceList() = 0;
  virtual void addService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf) = 0;
  virtual void addServiceList(const std::vector<ServiceJsonObject> &conf);
  virtual void replaceService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf);
  virtual void delService(const std::string &vip,const uint16_t &vport,const ServiceProtoEnum &proto) = 0;
  virtual void delServiceList();
};
