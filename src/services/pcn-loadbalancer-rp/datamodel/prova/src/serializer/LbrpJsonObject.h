/**
* lbrp API generated from lbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* LbrpJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "ServiceJsonObject.h"
#include "SrcIpRewriteJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {

enum class LbrpPortModeEnum {
  SINGLE, MULTI
};

/// <summary>
///
/// </summary>
class  LbrpJsonObject : public JsonObjectBase {
public:
  LbrpJsonObject();
  LbrpJsonObject(const nlohmann::json &json);
  ~LbrpJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the lbrp service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Defines if the service should be automatically optimized by Morpheus
  /// </summary>
  bool getDynOpt() const;
  void setDynOpt(bool value);
  bool dynOptIsSet() const;
  void unsetDynOpt();

  /// <summary>
  /// Set this flag if you want to start Morpheus compiler
  /// </summary>
  bool getStartMorpheus() const;
  void setStartMorpheus(bool value);
  bool startMorpheusIsSet() const;
  void unsetStartMorpheus();

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  /// LB mode of operation. &#39;SINGLE&#39; is optimized for working with a single FRONTEND port. &#39;MULTI&#39; allows to manage multiple FRONTEND port
  /// </summary>
  LbrpPortModeEnum getPortMode() const;
  void setPortMode(LbrpPortModeEnum value);
  bool portModeIsSet() const;
  void unsetPortMode();
  static std::string LbrpPortModeEnum_to_string(const LbrpPortModeEnum &value);
  static LbrpPortModeEnum string_to_LbrpPortModeEnum(const std::string &str);

  /// <summary>
  /// If configured, when a client request arrives to the LB, the source IP address is replaced with another IP address from the &#39;new&#39; range
  /// </summary>
  SrcIpRewriteJsonObject getSrcIpRewrite() const;
  void setSrcIpRewrite(SrcIpRewriteJsonObject value);
  bool srcIpRewriteIsSet() const;
  void unsetSrcIpRewrite();

  /// <summary>
  /// Services (i.e., virtual ip:protocol:port) exported to the client
  /// </summary>
  const std::vector<ServiceJsonObject>& getService() const;
  void addService(ServiceJsonObject value);
  bool serviceIsSet() const;
  void unsetService();

private:
  std::string m_name;
  bool m_nameIsSet;
  bool m_dynOpt;
  bool m_dynOptIsSet;
  bool m_startMorpheus;
  bool m_startMorpheusIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  LbrpPortModeEnum m_portMode;
  bool m_portModeIsSet;
  SrcIpRewriteJsonObject m_srcIpRewrite;
  bool m_srcIpRewriteIsSet;
  std::vector<ServiceJsonObject> m_service;
  bool m_serviceIsSet;
};

}
}
}

