/**
* lbrp API generated from lbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "LbrpJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

LbrpJsonObject::LbrpJsonObject() {
  m_nameIsSet = false;
  m_dynOpt = false;
  m_dynOptIsSet = true;
  m_startMorpheus = false;
  m_startMorpheusIsSet = true;
  m_portsIsSet = false;
  m_portMode = LbrpPortModeEnum::SINGLE;
  m_portModeIsSet = true;
  m_srcIpRewriteIsSet = false;
  m_serviceIsSet = false;
}

LbrpJsonObject::LbrpJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_dynOptIsSet = false;
  m_startMorpheusIsSet = false;
  m_portsIsSet = false;
  m_portModeIsSet = false;
  m_srcIpRewriteIsSet = false;
  m_serviceIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("dyn-opt")) {
    setDynOpt(val.at("dyn-opt").get<bool>());
  }

  if (val.count("start-morpheus")) {
    setStartMorpheus(val.at("start-morpheus").get<bool>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("port_mode")) {
    setPortMode(string_to_LbrpPortModeEnum(val.at("port_mode").get<std::string>()));
  }

  if (val.count("src-ip-rewrite")) {
    if (!val["src-ip-rewrite"].is_null()) {
      SrcIpRewriteJsonObject newItem { val["src-ip-rewrite"] };
      setSrcIpRewrite(newItem);
    }
  }

  if (val.count("service")) {
    for (auto& item : val["service"]) {
      ServiceJsonObject newItem{ item };
      m_service.push_back(newItem);
    }

    m_serviceIsSet = true;
  }
}

nlohmann::json LbrpJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_dynOptIsSet) {
    val["dyn-opt"] = m_dynOpt;
  }

  if (m_startMorpheusIsSet) {
    val["start-morpheus"] = m_startMorpheus;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  if (m_portModeIsSet) {
    val["port_mode"] = LbrpPortModeEnum_to_string(m_portMode);
  }

  if (m_srcIpRewriteIsSet) {
    val["src-ip-rewrite"] = JsonObjectBase::toJson(m_srcIpRewrite);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_service) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["service"] = jsonArray;
    }
  }

  return val;
}

std::string LbrpJsonObject::getName() const {
  return m_name;
}

void LbrpJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool LbrpJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



bool LbrpJsonObject::getDynOpt() const {
  return m_dynOpt;
}

void LbrpJsonObject::setDynOpt(bool value) {
  m_dynOpt = value;
  m_dynOptIsSet = true;
}

bool LbrpJsonObject::dynOptIsSet() const {
  return m_dynOptIsSet;
}

void LbrpJsonObject::unsetDynOpt() {
  m_dynOptIsSet = false;
}

bool LbrpJsonObject::getStartMorpheus() const {
  return m_startMorpheus;
}

void LbrpJsonObject::setStartMorpheus(bool value) {
  m_startMorpheus = value;
  m_startMorpheusIsSet = true;
}

bool LbrpJsonObject::startMorpheusIsSet() const {
  return m_startMorpheusIsSet;
}

void LbrpJsonObject::unsetStartMorpheus() {
  m_startMorpheusIsSet = false;
}

const std::vector<PortsJsonObject>& LbrpJsonObject::getPorts() const{
  return m_ports;
}

void LbrpJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool LbrpJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void LbrpJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

LbrpPortModeEnum LbrpJsonObject::getPortMode() const {
  return m_portMode;
}

void LbrpJsonObject::setPortMode(LbrpPortModeEnum value) {
  m_portMode = value;
  m_portModeIsSet = true;
}

bool LbrpJsonObject::portModeIsSet() const {
  return m_portModeIsSet;
}

void LbrpJsonObject::unsetPortMode() {
  m_portModeIsSet = false;
}

std::string LbrpJsonObject::LbrpPortModeEnum_to_string(const LbrpPortModeEnum &value){
  switch(value) {
    case LbrpPortModeEnum::SINGLE:
      return std::string("single");
    case LbrpPortModeEnum::MULTI:
      return std::string("multi");
    default:
      throw std::runtime_error("Bad Lbrp portMode");
  }
}

LbrpPortModeEnum LbrpJsonObject::string_to_LbrpPortModeEnum(const std::string &str){
  if (JsonObjectBase::iequals("single", str))
    return LbrpPortModeEnum::SINGLE;
  if (JsonObjectBase::iequals("multi", str))
    return LbrpPortModeEnum::MULTI;
  throw std::runtime_error("Lbrp portMode is invalid");
}
SrcIpRewriteJsonObject LbrpJsonObject::getSrcIpRewrite() const {
  return m_srcIpRewrite;
}

void LbrpJsonObject::setSrcIpRewrite(SrcIpRewriteJsonObject value) {
  m_srcIpRewrite = value;
  m_srcIpRewriteIsSet = true;
}

bool LbrpJsonObject::srcIpRewriteIsSet() const {
  return m_srcIpRewriteIsSet;
}

void LbrpJsonObject::unsetSrcIpRewrite() {
  m_srcIpRewriteIsSet = false;
}

const std::vector<ServiceJsonObject>& LbrpJsonObject::getService() const{
  return m_service;
}

void LbrpJsonObject::addService(ServiceJsonObject value) {
  m_service.push_back(value);
  m_serviceIsSet = true;
}


bool LbrpJsonObject::serviceIsSet() const {
  return m_serviceIsSet;
}

void LbrpJsonObject::unsetService() {
  m_serviceIsSet = false;
}


}
}
}

