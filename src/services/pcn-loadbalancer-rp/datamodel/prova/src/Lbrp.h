/**
* lbrp API generated from lbrp.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/LbrpBase.h"

#include "Ports.h"
#include "Service.h"
#include "SrcIpRewrite.h"


using namespace polycube::service::model;

class Lbrp : public LbrpBase {
 public:
  Lbrp(const std::string name, const LbrpJsonObject &conf);
  virtual ~Lbrp();

  void packet_in(Ports &port,
                 polycube::service::PacketInMetadata &md,
                 const std::vector<uint8_t> &packet) override;

  /// <summary>
  /// Defines if the service should be automatically optimized by Morpheus
  /// </summary>
  bool getDynOpt() override;

  /// <summary>
  /// Set this flag if you want to start Morpheus compiler
  /// </summary>
  bool getStartMorpheus() override;
  void setStartMorpheus(const bool &value) override;

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  std::shared_ptr<Ports> getPorts(const std::string &name) override;
  std::vector<std::shared_ptr<Ports>> getPortsList() override;
  void addPorts(const std::string &name, const PortsJsonObject &conf) override;
  void addPortsList(const std::vector<PortsJsonObject> &conf) override;
  void replacePorts(const std::string &name, const PortsJsonObject &conf) override;
  void delPorts(const std::string &name) override;
  void delPortsList() override;

  /// <summary>
  /// LB mode of operation. &#39;SINGLE&#39; is optimized for working with a single FRONTEND port. &#39;MULTI&#39; allows to manage multiple FRONTEND port
  /// </summary>
  LbrpPortModeEnum getPortMode() override;
  void setPortMode(const LbrpPortModeEnum &value) override;

  /// <summary>
  /// If configured, when a client request arrives to the LB, the source IP address is replaced with another IP address from the &#39;new&#39; range
  /// </summary>
  std::shared_ptr<SrcIpRewrite> getSrcIpRewrite() override;
  void addSrcIpRewrite(const SrcIpRewriteJsonObject &value) override;
  void replaceSrcIpRewrite(const SrcIpRewriteJsonObject &conf) override;
  void delSrcIpRewrite() override;

  /// <summary>
  /// Services (i.e., virtual ip:protocol:port) exported to the client
  /// </summary>
  std::shared_ptr<Service> getService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) override;
  std::vector<std::shared_ptr<Service>> getServiceList() override;
  void addService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf) override;
  void addServiceList(const std::vector<ServiceJsonObject> &conf) override;
  void replaceService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto, const ServiceJsonObject &conf) override;
  void delService(const std::string &vip, const uint16_t &vport, const ServiceProtoEnum &proto) override;
  void delServiceList() override;
};
