/**
* katran API generated from katran.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "GeneralStatsGetVipStatsInputJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

GeneralStatsGetVipStatsInputJsonObject::GeneralStatsGetVipStatsInputJsonObject() {
  m_addressIsSet = false;
  m_portIsSet = false;
  m_protoIsSet = false;
}

GeneralStatsGetVipStatsInputJsonObject::GeneralStatsGetVipStatsInputJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_addressIsSet = false;
  m_portIsSet = false;
  m_protoIsSet = false;


  if (val.count("address")) {
    setAddress(val.at("address").get<std::string>());
  }

  if (val.count("port")) {
    setPort(val.at("port").get<uint16_t>());
  }

  if (val.count("proto")) {
    setProto(string_to_GeneralStatsGetVipStatsInputProtoEnum(val.at("proto").get<std::string>()));
  }
}

nlohmann::json GeneralStatsGetVipStatsInputJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_addressIsSet) {
    val["address"] = m_address;
  }

  if (m_portIsSet) {
    val["port"] = m_port;
  }

  if (m_protoIsSet) {
    val["proto"] = GeneralStatsGetVipStatsInputProtoEnum_to_string(m_proto);
  }

  return val;
}

std::string GeneralStatsGetVipStatsInputJsonObject::getAddress() const {
  return m_address;
}

void GeneralStatsGetVipStatsInputJsonObject::setAddress(std::string value) {
  m_address = value;
  m_addressIsSet = true;
}

bool GeneralStatsGetVipStatsInputJsonObject::addressIsSet() const {
  return m_addressIsSet;
}



uint16_t GeneralStatsGetVipStatsInputJsonObject::getPort() const {
  return m_port;
}

void GeneralStatsGetVipStatsInputJsonObject::setPort(uint16_t value) {
  m_port = value;
  m_portIsSet = true;
}

bool GeneralStatsGetVipStatsInputJsonObject::portIsSet() const {
  return m_portIsSet;
}



GeneralStatsGetVipStatsInputProtoEnum GeneralStatsGetVipStatsInputJsonObject::getProto() const {
  return m_proto;
}

void GeneralStatsGetVipStatsInputJsonObject::setProto(GeneralStatsGetVipStatsInputProtoEnum value) {
  m_proto = value;
  m_protoIsSet = true;
}

bool GeneralStatsGetVipStatsInputJsonObject::protoIsSet() const {
  return m_protoIsSet;
}



std::string GeneralStatsGetVipStatsInputJsonObject::GeneralStatsGetVipStatsInputProtoEnum_to_string(const GeneralStatsGetVipStatsInputProtoEnum &value){
  switch(value) {
    case GeneralStatsGetVipStatsInputProtoEnum::ICMP:
      return std::string("icmp");
    case GeneralStatsGetVipStatsInputProtoEnum::TCP:
      return std::string("tcp");
    case GeneralStatsGetVipStatsInputProtoEnum::UDP:
      return std::string("udp");
    case GeneralStatsGetVipStatsInputProtoEnum::ALL:
      return std::string("all");
    default:
      throw std::runtime_error("Bad GeneralStatsGetVipStatsInput proto");
  }
}

GeneralStatsGetVipStatsInputProtoEnum GeneralStatsGetVipStatsInputJsonObject::string_to_GeneralStatsGetVipStatsInputProtoEnum(const std::string &str){
  if (JsonObjectBase::iequals("icmp", str))
    return GeneralStatsGetVipStatsInputProtoEnum::ICMP;
  if (JsonObjectBase::iequals("tcp", str))
    return GeneralStatsGetVipStatsInputProtoEnum::TCP;
  if (JsonObjectBase::iequals("udp", str))
    return GeneralStatsGetVipStatsInputProtoEnum::UDP;
  if (JsonObjectBase::iequals("all", str))
    return GeneralStatsGetVipStatsInputProtoEnum::ALL;
  throw std::runtime_error("GeneralStatsGetVipStatsInput proto is invalid");
}

}
}
}

