/**
* katran API generated from katran.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* GeneralStatsGetVipStatsInputJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {

enum class GeneralStatsGetVipStatsInputProtoEnum {
  ICMP, TCP, UDP, ALL
};

/// <summary>
///
/// </summary>
class  GeneralStatsGetVipStatsInputJsonObject : public JsonObjectBase {
public:
  GeneralStatsGetVipStatsInputJsonObject();
  GeneralStatsGetVipStatsInputJsonObject(const nlohmann::json &json);
  ~GeneralStatsGetVipStatsInputJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Virtual IP (vip) of the service where clients connect to
  /// </summary>
  std::string getAddress() const;
  void setAddress(std::string value);
  bool addressIsSet() const;

  /// <summary>
  /// Port of the virtual server where clients connect to (this value is ignored in case of ICMP)
  /// </summary>
  uint16_t getPort() const;
  void setPort(uint16_t value);
  bool portIsSet() const;

  /// <summary>
  /// Upper-layer protocol associated with a loadbalancing service instance. &#39;ALL&#39; creates an entry for all the supported protocols
  /// </summary>
  GeneralStatsGetVipStatsInputProtoEnum getProto() const;
  void setProto(GeneralStatsGetVipStatsInputProtoEnum value);
  bool protoIsSet() const;
  static std::string GeneralStatsGetVipStatsInputProtoEnum_to_string(const GeneralStatsGetVipStatsInputProtoEnum &value);
  static GeneralStatsGetVipStatsInputProtoEnum string_to_GeneralStatsGetVipStatsInputProtoEnum(const std::string &str);

private:
  std::string m_address;
  bool m_addressIsSet;
  uint16_t m_port;
  bool m_portIsSet;
  GeneralStatsGetVipStatsInputProtoEnum m_proto;
  bool m_protoIsSet;
};

}
}
}

