/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "Memcached.h"
#include "Bmc.h"


Memcached::Memcached(Bmc &parent, const MemcachedJsonObject &conf)
    : MemcachedBase(parent) {
  if (conf.lenIsSet()) {
    setLen(conf.getLen());
  }

  if (conf.validIsSet()) {
    setValid(conf.getValid());
  }

  if (conf.hashIsSet()) {
    setHash(conf.getHash());
  }

  if (conf.dataIsSet()) {
    setData(conf.getData());
  }

  hash_key_ = conf.getHashKey();
}

Memcached::~Memcached() {}

uint32_t Memcached::getHashKey() {
  return hash_key_;
}

uint32_t Memcached::getLen() {
  return len_;
}

void Memcached::setLen(const uint32_t &value) {
  len_ = value;
}

std::string Memcached::getValid() {
  return valid_;
}

void Memcached::setValid(const std::string &value) {
  valid_ = value;
}

int32_t Memcached::getHash() {
  return hash_;
}

void Memcached::setHash(const int32_t &value) {
  hash_ = value;
}

std::string Memcached::getData() {
  return data_;
}

void Memcached::setData(const std::string &value) {
  data_ = value;
}


