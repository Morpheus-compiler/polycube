/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* MemcachedBase.h
*
*
*/

#pragma once

#include "../serializer/MemcachedJsonObject.h"






#include <spdlog/spdlog.h>

using namespace polycube::service::model;

class Bmc;

class MemcachedBase {
 public:
  
  MemcachedBase(Bmc &parent);
  
  virtual ~MemcachedBase();
  virtual void update(const MemcachedJsonObject &conf);
  virtual MemcachedJsonObject toJsonObject();

  /// <summary>
  /// Key of the BMC Cache
  /// </summary>
  virtual uint32_t getHashKey() = 0;

  /// <summary>
  /// Lenght on the BMC Cache entry
  /// </summary>
  virtual uint32_t getLen() = 0;
  virtual void setLen(const uint32_t &value) = 0;

  /// <summary>
  /// Flag to check if entry is valid or not
  /// </summary>
  virtual std::string getValid() = 0;
  virtual void setValid(const std::string &value) = 0;

  /// <summary>
  /// Hash of the cache entry value
  /// </summary>
  virtual int32_t getHash() = 0;
  virtual void setHash(const int32_t &value) = 0;

  /// <summary>
  /// Data inside the BMC cache
  /// </summary>
  virtual std::string getData() = 0;
  virtual void setData(const std::string &value) = 0;

  std::shared_ptr<spdlog::logger> logger();
 protected:
  Bmc &parent_;
};
