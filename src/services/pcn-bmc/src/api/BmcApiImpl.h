/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* BmcApiImpl.h
*
*
*/

#pragma once


#include <memory>
#include <map>
#include <mutex>
#include "../Bmc.h"

#include "BmcJsonObject.h"
#include "BmcStatsJsonObject.h"
#include "BmcStatsGetPktCountInputJsonObject.h"
#include "BmcStatsGetPktCountOutputJsonObject.h"
#include "BmcStatsResetAllOutputJsonObject.h"
#include "MemcachedJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>

namespace polycube {
namespace service {
namespace api {

using namespace polycube::service::model;

namespace BmcApiImpl {
  BmcStatsGetPktCountOutputJsonObject create_bmc_bmc_stats_get_pkt_count_by_id(const std::string &name, const BmcStatsGetPktCountInputJsonObject &value);
  BmcStatsResetAllOutputJsonObject create_bmc_bmc_stats_reset_all_by_id(const std::string &name);
  void create_bmc_by_id(const std::string &name, const BmcJsonObject &value);
  void create_bmc_memcached_by_id(const std::string &name, const uint32_t &hashKey, const MemcachedJsonObject &value);
  void create_bmc_memcached_list_by_id(const std::string &name, const std::vector<MemcachedJsonObject> &value);
  void create_bmc_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void create_bmc_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void delete_bmc_by_id(const std::string &name);
  void delete_bmc_memcached_by_id(const std::string &name, const uint32_t &hashKey);
  void delete_bmc_memcached_list_by_id(const std::string &name);
  void delete_bmc_ports_by_id(const std::string &name, const std::string &portsName);
  void delete_bmc_ports_list_by_id(const std::string &name);
  BmcStatsJsonObject read_bmc_bmc_stats_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_get_recv_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_get_resp_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_hit_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_hit_misprediction_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_invalidation_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_miss_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_set_recv_count_by_id(const std::string &name);
  uint32_t read_bmc_bmc_stats_update_count_by_id(const std::string &name);
  BmcJsonObject read_bmc_by_id(const std::string &name);
  bool read_bmc_dyn_opt_by_id(const std::string &name);
  std::vector<BmcJsonObject> read_bmc_list_by_id();
  MemcachedJsonObject read_bmc_memcached_by_id(const std::string &name, const uint32_t &hashKey);
  std::string read_bmc_memcached_data_by_id(const std::string &name, const uint32_t &hashKey);
  int32_t read_bmc_memcached_hash_by_id(const std::string &name, const uint32_t &hashKey);
  uint32_t read_bmc_memcached_len_by_id(const std::string &name, const uint32_t &hashKey);
  std::vector<MemcachedJsonObject> read_bmc_memcached_list_by_id(const std::string &name);
  std::string read_bmc_memcached_valid_by_id(const std::string &name, const uint32_t &hashKey);
  PortsJsonObject read_bmc_ports_by_id(const std::string &name, const std::string &portsName);
  std::vector<PortsJsonObject> read_bmc_ports_list_by_id(const std::string &name);
  void replace_bmc_by_id(const std::string &name, const BmcJsonObject &value);
  void replace_bmc_memcached_by_id(const std::string &name, const uint32_t &hashKey, const MemcachedJsonObject &value);
  void replace_bmc_memcached_list_by_id(const std::string &name, const std::vector<MemcachedJsonObject> &value);
  void replace_bmc_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void replace_bmc_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);
  void update_bmc_by_id(const std::string &name, const BmcJsonObject &value);
  void update_bmc_list_by_id(const std::vector<BmcJsonObject> &value);
  void update_bmc_memcached_by_id(const std::string &name, const uint32_t &hashKey, const MemcachedJsonObject &value);
  void update_bmc_memcached_data_by_id(const std::string &name, const uint32_t &hashKey, const std::string &value);
  void update_bmc_memcached_hash_by_id(const std::string &name, const uint32_t &hashKey, const int32_t &value);
  void update_bmc_memcached_len_by_id(const std::string &name, const uint32_t &hashKey, const uint32_t &value);
  void update_bmc_memcached_list_by_id(const std::string &name, const std::vector<MemcachedJsonObject> &value);
  void update_bmc_memcached_valid_by_id(const std::string &name, const uint32_t &hashKey, const std::string &value);
  void update_bmc_ports_by_id(const std::string &name, const std::string &portsName, const PortsJsonObject &value);
  void update_bmc_ports_list_by_id(const std::string &name, const std::vector<PortsJsonObject> &value);

  /* help related */
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_bmc_list_by_id_get_list();
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_bmc_memcached_list_by_id_get_list(const std::string &name);
  std::vector<nlohmann::fifo_map<std::string, std::string>> read_bmc_ports_list_by_id_get_list(const std::string &name);

}
}
}
}

