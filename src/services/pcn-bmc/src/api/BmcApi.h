/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* BmcApi.h
*
*/

#pragma once

#define POLYCUBE_SERVICE_NAME "bmc"


#include "polycube/services/response.h"
#include "polycube/services/shared_lib_elements.h"

#include "BmcJsonObject.h"
#include "BmcStatsJsonObject.h"
#include "BmcStatsGetPktCountInputJsonObject.h"
#include "BmcStatsGetPktCountOutputJsonObject.h"
#include "BmcStatsResetAllOutputJsonObject.h"
#include "MemcachedJsonObject.h"
#include "PortsJsonObject.h"
#include <vector>


#ifdef __cplusplus
extern "C" {
#endif

Response create_bmc_bmc_stats_get_pkt_count_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_bmc_bmc_stats_reset_all_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response create_bmc_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_bmc_memcached_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_bmc_memcached_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_bmc_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response create_bmc_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response delete_bmc_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_bmc_memcached_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_bmc_memcached_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_bmc_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response delete_bmc_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_get_recv_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_get_resp_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_hit_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_hit_misprediction_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_invalidation_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_miss_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_set_recv_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_bmc_stats_update_count_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_dyn_opt_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_data_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_hash_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_len_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_memcached_valid_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response read_bmc_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys);
Response replace_bmc_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_bmc_memcached_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_bmc_memcached_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_bmc_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response replace_bmc_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_data_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_hash_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_len_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_memcached_valid_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_ports_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);
Response update_bmc_ports_list_by_id_handler(const char *name, const Key *keys, size_t num_keys, const char *value);

Response bmc_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response bmc_memcached_list_by_id_help(const char *name, const Key *keys, size_t num_keys);
Response bmc_ports_list_by_id_help(const char *name, const Key *keys, size_t num_keys);


#ifdef __cplusplus
}
#endif

