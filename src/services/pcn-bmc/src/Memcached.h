/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


#pragma once


#include "../base/MemcachedBase.h"


class Bmc;

using namespace polycube::service::model;

class Memcached : public MemcachedBase {
 public:
  Memcached(Bmc &parent, const MemcachedJsonObject &conf);
  virtual ~Memcached();

  /// <summary>
  /// Key of the BMC Cache
  /// </summary>
  uint32_t getHashKey() override;

  /// <summary>
  /// Lenght on the BMC Cache entry
  /// </summary>
  uint32_t getLen() override;
  void setLen(const uint32_t &value) override;

  /// <summary>
  /// Flag to check if entry is valid or not
  /// </summary>
  std::string getValid() override;
  void setValid(const std::string &value) override;

  /// <summary>
  /// Hash of the cache entry value
  /// </summary>
  int32_t getHash() override;
  void setHash(const int32_t &value) override;

  /// <summary>
  /// Data inside the BMC cache
  /// </summary>
  std::string getData() override;
  void setData(const std::string &value) override;

private:
  uint32_t hash_key_;
  uint32_t len_;
  std::string valid_;
  int32_t hash_;
  std::string data_;
};
