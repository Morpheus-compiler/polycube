/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* BmcJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"

#include "PortsJsonObject.h"
#include "BmcStatsJsonObject.h"
#include "MemcachedJsonObject.h"
#include <vector>
#include "polycube/services/cube.h"

namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  BmcJsonObject : public JsonObjectBase {
public:
  BmcJsonObject();
  BmcJsonObject(const nlohmann::json &json);
  ~BmcJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Name of the bmc service
  /// </summary>
  std::string getName() const;
  void setName(std::string value);
  bool nameIsSet() const;

  /// <summary>
  /// Defines if the service should be automatically optimized by Morpheus
  /// </summary>
  bool getDynOpt() const;
  void setDynOpt(bool value);
  bool dynOptIsSet() const;
  void unsetDynOpt();

  /// <summary>
  /// Entry of the ports table
  /// </summary>
  const std::vector<PortsJsonObject>& getPorts() const;
  void addPorts(PortsJsonObject value);
  bool portsIsSet() const;
  void unsetPorts();

  /// <summary>
  ///
  /// </summary>
  BmcStatsJsonObject getBmcStats() const;
  void setBmcStats(BmcStatsJsonObject value);
  bool bmcStatsIsSet() const;
  void unsetBmcStats();

  /// <summary>
  /// Entry in the BMC Cache
  /// </summary>
  const std::vector<MemcachedJsonObject>& getMemcached() const;
  void addMemcached(MemcachedJsonObject value);
  bool memcachedIsSet() const;
  void unsetMemcached();

private:
  std::string m_name;
  bool m_nameIsSet;
  bool m_dynOpt;
  bool m_dynOptIsSet;
  std::vector<PortsJsonObject> m_ports;
  bool m_portsIsSet;
  BmcStatsJsonObject m_bmcStats;
  bool m_bmcStatsIsSet;
  std::vector<MemcachedJsonObject> m_memcached;
  bool m_memcachedIsSet;
};

}
}
}

