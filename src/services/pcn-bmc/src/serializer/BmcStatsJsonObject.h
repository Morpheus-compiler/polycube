/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* BmcStatsJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  BmcStatsJsonObject : public JsonObjectBase {
public:
  BmcStatsJsonObject();
  BmcStatsJsonObject(const nlohmann::json &json);
  ~BmcStatsJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Number of GET command received
  /// </summary>
  uint32_t getGetRecvCount() const;
  void setGetRecvCount(uint32_t value);
  bool getRecvCountIsSet() const;
  void unsetGetRecvCount();

  /// <summary>
  /// Number of SET command received
  /// </summary>
  uint32_t getSetRecvCount() const;
  void setSetRecvCount(uint32_t value);
  bool setRecvCountIsSet() const;
  void unsetSetRecvCount();

  /// <summary>
  /// Number of GET command reply analyzed
  /// </summary>
  uint32_t getGetRespCount() const;
  void setGetRespCount(uint32_t value);
  bool getRespCountIsSet() const;
  void unsetGetRespCount();

  /// <summary>
  /// Number of keys that were expected to hit but did not (either because of a hash colision or a race with an invalidation/update)
  /// </summary>
  uint32_t getHitMisprediction() const;
  void setHitMisprediction(uint32_t value);
  bool hitMispredictionIsSet() const;
  void unsetHitMisprediction();

  /// <summary>
  /// Number of HIT in kernel cache
  /// </summary>
  uint32_t getHitCount() const;
  void setHitCount(uint32_t value);
  bool hitCountIsSet() const;
  void unsetHitCount();

  /// <summary>
  /// Number of MISS in kernel cache
  /// </summary>
  uint32_t getMissCount() const;
  void setMissCount(uint32_t value);
  bool missCountIsSet() const;
  void unsetMissCount();

  /// <summary>
  /// Number of kernel cache updates
  /// </summary>
  uint32_t getUpdateCount() const;
  void setUpdateCount(uint32_t value);
  bool updateCountIsSet() const;
  void unsetUpdateCount();

  /// <summary>
  /// Number of kernel cache entry invalidated
  /// </summary>
  uint32_t getInvalidationCount() const;
  void setInvalidationCount(uint32_t value);
  bool invalidationCountIsSet() const;
  void unsetInvalidationCount();

private:
  uint32_t m_getRecvCount;
  bool m_getRecvCountIsSet;
  uint32_t m_setRecvCount;
  bool m_setRecvCountIsSet;
  uint32_t m_getRespCount;
  bool m_getRespCountIsSet;
  uint32_t m_hitMisprediction;
  bool m_hitMispredictionIsSet;
  uint32_t m_hitCount;
  bool m_hitCountIsSet;
  uint32_t m_missCount;
  bool m_missCountIsSet;
  uint32_t m_updateCount;
  bool m_updateCountIsSet;
  uint32_t m_invalidationCount;
  bool m_invalidationCountIsSet;
};

}
}
}

