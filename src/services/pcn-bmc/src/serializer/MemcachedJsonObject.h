/**
* bmc API generated from bmc.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */

/*
* MemcachedJsonObject.h
*
*
*/

#pragma once


#include "JsonObjectBase.h"


namespace polycube {
namespace service {
namespace model {


/// <summary>
///
/// </summary>
class  MemcachedJsonObject : public JsonObjectBase {
public:
  MemcachedJsonObject();
  MemcachedJsonObject(const nlohmann::json &json);
  ~MemcachedJsonObject() final = default;
  nlohmann::json toJson() const final;


  /// <summary>
  /// Key of the BMC Cache
  /// </summary>
  uint32_t getHashKey() const;
  void setHashKey(uint32_t value);
  bool hashKeyIsSet() const;

  /// <summary>
  /// Lenght on the BMC Cache entry
  /// </summary>
  uint32_t getLen() const;
  void setLen(uint32_t value);
  bool lenIsSet() const;
  void unsetLen();

  /// <summary>
  /// Flag to check if entry is valid or not
  /// </summary>
  std::string getValid() const;
  void setValid(std::string value);
  bool validIsSet() const;
  void unsetValid();

  /// <summary>
  /// Hash of the cache entry value
  /// </summary>
  int32_t getHash() const;
  void setHash(int32_t value);
  bool hashIsSet() const;
  void unsetHash();

  /// <summary>
  /// Data inside the BMC cache
  /// </summary>
  std::string getData() const;
  void setData(std::string value);
  bool dataIsSet() const;
  void unsetData();

private:
  uint32_t m_hashKey;
  bool m_hashKeyIsSet;
  uint32_t m_len;
  bool m_lenIsSet;
  std::string m_valid;
  bool m_validIsSet;
  int32_t m_hash;
  bool m_hashIsSet;
  std::string m_data;
  bool m_dataIsSet;
};

}
}
}

